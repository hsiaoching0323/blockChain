{"ast":null,"code":"import Utils from './utils.js';\nimport { PLATFORMS_MAP } from './constants.js';\n/*\n * Tablets go first since usually they have more specific\n * signs to detect.\n */\n\nexport default [\n/* Googlebot */\n{\n  test: [/googlebot/i],\n\n  describe() {\n    return {\n      type: 'bot',\n      vendor: 'Google'\n    };\n  }\n\n},\n/* Huawei */\n{\n  test: [/huawei/i],\n\n  describe(ua) {\n    const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\n    const platform = {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Huawei'\n    };\n\n    if (model) {\n      platform.model = model;\n    }\n\n    return platform;\n  }\n\n},\n/* Nexus Tablet */\n{\n  test: [/nexus\\s*(?:7|8|9|10).*/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Nexus'\n    };\n  }\n\n},\n/* iPad */\n{\n  test: [/ipad/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Apple',\n      model: 'iPad'\n    };\n  }\n\n},\n/* Firefox on iPad */\n{\n  test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Apple',\n      model: 'iPad'\n    };\n  }\n\n},\n/* Amazon Kindle Fire */\n{\n  test: [/kftt build/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Amazon',\n      model: 'Kindle Fire HD 7'\n    };\n  }\n\n},\n/* Another Amazon Tablet with Silk */\n{\n  test: [/silk/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Amazon'\n    };\n  }\n\n},\n/* Tablet */\n{\n  test: [/tablet(?! pc)/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet\n    };\n  }\n\n},\n/* iPod/iPhone */\n{\n  test(parser) {\n    const iDevice = parser.test(/ipod|iphone/i);\n    const likeIDevice = parser.test(/like (ipod|iphone)/i);\n    return iDevice && !likeIDevice;\n  },\n\n  describe(ua) {\n    const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Apple',\n      model\n    };\n  }\n\n},\n/* Nexus Mobile */\n{\n  test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Nexus'\n    };\n  }\n\n},\n/* Mobile */\n{\n  test: [/[^-]mobi/i],\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n\n},\n/* BlackBerry */\n{\n  test(parser) {\n    return parser.getBrowserName(true) === 'blackberry';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'BlackBerry'\n    };\n  }\n\n},\n/* Bada */\n{\n  test(parser) {\n    return parser.getBrowserName(true) === 'bada';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n\n},\n/* Windows Phone */\n{\n  test(parser) {\n    return parser.getBrowserName() === 'windows phone';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Microsoft'\n    };\n  }\n\n},\n/* Android Tablet */\n{\n  test(parser) {\n    const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\n    return parser.getOSName(true) === 'android' && osMajorVersion >= 3;\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet\n    };\n  }\n\n},\n/* Android Mobile */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'android';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n\n},\n/* desktop */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'macos';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop,\n      vendor: 'Apple'\n    };\n  }\n\n},\n/* Windows */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'windows';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop\n    };\n  }\n\n},\n/* Linux */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'linux';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop\n    };\n  }\n\n},\n/* PlayStation 4 */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'playstation 4';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tv\n    };\n  }\n\n},\n/* Roku */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'roku';\n  },\n\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tv\n    };\n  }\n\n}];","map":{"version":3,"names":["Utils","PLATFORMS_MAP","test","describe","type","vendor","ua","model","getFirstMatch","platform","mobile","tablet","parser","iDevice","likeIDevice","getBrowserName","osMajorVersion","Number","String","getOSVersion","split","getOSName","desktop","tv"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/bowser/src/parser-platforms.js"],"sourcesContent":["import Utils from './utils.js';\nimport { PLATFORMS_MAP } from './constants.js';\n\n/*\n * Tablets go first since usually they have more specific\n * signs to detect.\n */\n\nexport default [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe() {\n      return {\n        type: 'bot',\n        vendor: 'Google',\n      };\n    },\n  },\n\n  /* Huawei */\n  {\n    test: [/huawei/i],\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\n      const platform = {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Huawei',\n      };\n      if (model) {\n        platform.model = model;\n      }\n      return platform;\n    },\n  },\n\n  /* Nexus Tablet */\n  {\n    test: [/nexus\\s*(?:7|8|9|10).*/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Nexus',\n      };\n    },\n  },\n\n  /* iPad */\n  {\n    test: [/ipad/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Apple',\n        model: 'iPad',\n      };\n    },\n  },\n\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Apple',\n        model: 'iPad',\n      };\n    },\n  },\n\n  /* Amazon Kindle Fire */\n  {\n    test: [/kftt build/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Amazon',\n        model: 'Kindle Fire HD 7',\n      };\n    },\n  },\n\n  /* Another Amazon Tablet with Silk */\n  {\n    test: [/silk/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Amazon',\n      };\n    },\n  },\n\n  /* Tablet */\n  {\n    test: [/tablet(?! pc)/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n      };\n    },\n  },\n\n  /* iPod/iPhone */\n  {\n    test(parser) {\n      const iDevice = parser.test(/ipod|iphone/i);\n      const likeIDevice = parser.test(/like (ipod|iphone)/i);\n      return iDevice && !likeIDevice;\n    },\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Apple',\n        model,\n      };\n    },\n  },\n\n  /* Nexus Mobile */\n  {\n    test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Nexus',\n      };\n    },\n  },\n\n  /* Mobile */\n  {\n    test: [/[^-]mobi/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* BlackBerry */\n  {\n    test(parser) {\n      return parser.getBrowserName(true) === 'blackberry';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'BlackBerry',\n      };\n    },\n  },\n\n  /* Bada */\n  {\n    test(parser) {\n      return parser.getBrowserName(true) === 'bada';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* Windows Phone */\n  {\n    test(parser) {\n      return parser.getBrowserName() === 'windows phone';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Microsoft',\n      };\n    },\n  },\n\n  /* Android Tablet */\n  {\n    test(parser) {\n      const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\n      return parser.getOSName(true) === 'android' && (osMajorVersion >= 3);\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n      };\n    },\n  },\n\n  /* Android Mobile */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'android';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* desktop */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'macos';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n        vendor: 'Apple',\n      };\n    },\n  },\n\n  /* Windows */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'windows';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n      };\n    },\n  },\n\n  /* Linux */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'linux';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n      };\n    },\n  },\n\n  /* PlayStation 4 */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'playstation 4';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv,\n      };\n    },\n  },\n\n  /* Roku */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'roku';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv,\n      };\n    },\n  },\n];\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA;AACA;AACA;AACA;;AAEA,eAAe;AACb;AACA;EACEC,IAAI,EAAE,CAAC,YAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAE,KADD;MAELC,MAAM,EAAE;IAFH,CAAP;EAID;;AAPH,CAFa;AAYb;AACA;EACEH,IAAI,EAAE,CAAC,SAAD,CADR;;EAEEC,QAAQ,CAACG,EAAD,EAAK;IACX,MAAMC,KAAK,GAAGP,KAAK,CAACQ,aAAN,CAAoB,YAApB,EAAkCF,EAAlC,KAAyC,MAAvD;IACA,MAAMG,QAAQ,GAAG;MACfL,IAAI,EAAEH,aAAa,CAACS,MADL;MAEfL,MAAM,EAAE;IAFO,CAAjB;;IAIA,IAAIE,KAAJ,EAAW;MACTE,QAAQ,CAACF,KAAT,GAAiBA,KAAjB;IACD;;IACD,OAAOE,QAAP;EACD;;AAZH,CAba;AA4Bb;AACA;EACEP,IAAI,EAAE,CAAC,yBAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU,MADf;MAELN,MAAM,EAAE;IAFH,CAAP;EAID;;AAPH,CA7Ba;AAuCb;AACA;EACEH,IAAI,EAAE,CAAC,OAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU,MADf;MAELN,MAAM,EAAE,OAFH;MAGLE,KAAK,EAAE;IAHF,CAAP;EAKD;;AARH,CAxCa;AAmDb;AACA;EACEL,IAAI,EAAE,CAAC,6BAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU,MADf;MAELN,MAAM,EAAE,OAFH;MAGLE,KAAK,EAAE;IAHF,CAAP;EAKD;;AARH,CApDa;AA+Db;AACA;EACEL,IAAI,EAAE,CAAC,aAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU,MADf;MAELN,MAAM,EAAE,QAFH;MAGLE,KAAK,EAAE;IAHF,CAAP;EAKD;;AARH,CAhEa;AA2Eb;AACA;EACEL,IAAI,EAAE,CAAC,OAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU,MADf;MAELN,MAAM,EAAE;IAFH,CAAP;EAID;;AAPH,CA5Ea;AAsFb;AACA;EACEH,IAAI,EAAE,CAAC,gBAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU;IADf,CAAP;EAGD;;AANH,CAvFa;AAgGb;AACA;EACET,IAAI,CAACU,MAAD,EAAS;IACX,MAAMC,OAAO,GAAGD,MAAM,CAACV,IAAP,CAAY,cAAZ,CAAhB;IACA,MAAMY,WAAW,GAAGF,MAAM,CAACV,IAAP,CAAY,qBAAZ,CAApB;IACA,OAAOW,OAAO,IAAI,CAACC,WAAnB;EACD,CALH;;EAMEX,QAAQ,CAACG,EAAD,EAAK;IACX,MAAMC,KAAK,GAAGP,KAAK,CAACQ,aAAN,CAAoB,gBAApB,EAAsCF,EAAtC,CAAd;IACA,OAAO;MACLF,IAAI,EAAEH,aAAa,CAACS,MADf;MAELL,MAAM,EAAE,OAFH;MAGLE;IAHK,CAAP;EAKD;;AAbH,CAjGa;AAiHb;AACA;EACEL,IAAI,EAAE,CAAC,kBAAD,EAAqB,eAArB,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS,MADf;MAELL,MAAM,EAAE;IAFH,CAAP;EAID;;AAPH,CAlHa;AA4Hb;AACA;EACEH,IAAI,EAAE,CAAC,WAAD,CADR;;EAEEC,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS;IADf,CAAP;EAGD;;AANH,CA7Ha;AAsIb;AACA;EACER,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACG,cAAP,CAAsB,IAAtB,MAAgC,YAAvC;EACD,CAHH;;EAIEZ,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS,MADf;MAELL,MAAM,EAAE;IAFH,CAAP;EAID;;AATH,CAvIa;AAmJb;AACA;EACEH,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACG,cAAP,CAAsB,IAAtB,MAAgC,MAAvC;EACD,CAHH;;EAIEZ,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS;IADf,CAAP;EAGD;;AARH,CApJa;AA+Jb;AACA;EACER,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACG,cAAP,OAA4B,eAAnC;EACD,CAHH;;EAIEZ,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS,MADf;MAELL,MAAM,EAAE;IAFH,CAAP;EAID;;AATH,CAhKa;AA4Kb;AACA;EACEH,IAAI,CAACU,MAAD,EAAS;IACX,MAAMI,cAAc,GAAGC,MAAM,CAACC,MAAM,CAACN,MAAM,CAACO,YAAP,EAAD,CAAN,CAA8BC,KAA9B,CAAoC,GAApC,EAAyC,CAAzC,CAAD,CAA7B;IACA,OAAOR,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,SAA3B,IAAyCL,cAAc,IAAI,CAAlE;EACD,CAJH;;EAKEb,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACU;IADf,CAAP;EAGD;;AATH,CA7Ka;AAyLb;AACA;EACET,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,SAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACS;IADf,CAAP;EAGD;;AARH,CA1La;AAqMb;AACA;EACER,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,OAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACqB,OADf;MAELjB,MAAM,EAAE;IAFH,CAAP;EAID;;AATH,CAtMa;AAkNb;AACA;EACEH,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,SAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACqB;IADf,CAAP;EAGD;;AARH,CAnNa;AA8Nb;AACA;EACEpB,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,OAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACqB;IADf,CAAP;EAGD;;AARH,CA/Na;AA0Ob;AACA;EACEpB,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,eAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACsB;IADf,CAAP;EAGD;;AARH,CA3Oa;AAsPb;AACA;EACErB,IAAI,CAACU,MAAD,EAAS;IACX,OAAOA,MAAM,CAACS,SAAP,CAAiB,IAAjB,MAA2B,MAAlC;EACD,CAHH;;EAIElB,QAAQ,GAAG;IACT,OAAO;MACLC,IAAI,EAAEH,aAAa,CAACsB;IADf,CAAP;EAGD;;AARH,CAvPa,CAAf"},"metadata":{},"sourceType":"module"}