{"ast":null,"code":"/**\n * Browsers' descriptors\n *\n * The idea of descriptors is simple. You should know about them two simple things:\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\n * 2. Order of descriptors is important.\n *\n * More details:\n * 1. Method or property `test` serves as a way to detect whether the UA string\n * matches some certain browser or not. The `describe` method helps to make a result\n * object with params that show some browser-specific things: name, version, etc.\n * 2. Order of descriptors is important because a Parser goes through them one by one\n * in course. For example, if you insert Chrome's descriptor as the first one,\n * more then a half of browsers will be described as Chrome, because they will pass\n * the Chrome descriptor's test.\n *\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\n * will be applied to a UA string to test it whether it matches or not.\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\n *\n * Or `test` could be a method. In that case it gets a Parser instance and should\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\n */\nimport Utils from './utils.js';\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\nconst browsersList = [\n/* Googlebot */\n{\n  test: [/googlebot/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Googlebot'\n    };\n    const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* Opera < 13.0 */\n{\n  test: [/opera/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Opera'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* Opera > 13.0 */\n{\n  test: [/opr\\/|opios/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Opera'\n    };\n    const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/SamsungBrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Samsung Internet for Android'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/Whale/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'NAVER Whale Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/MZBrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'MZ Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/focus/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Focus'\n    };\n    const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/swing/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Swing'\n    };\n    const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/coast/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Opera Coast'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Opera Touch'\n    };\n    const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/yabrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Yandex Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/ucbrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'UC Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/Maxthon|mxios/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Maxthon'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/epiphany/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Epiphany'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/puffin/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Puffin'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/sleipnir/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Sleipnir'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/k-meleon/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'K-Meleon'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/micromessenger/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'WeChat'\n    };\n    const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/qqbrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: /qqbrowserlite/i.test(ua) ? 'QQ Browser Lite' : 'QQ Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/msie|trident/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Internet Explorer'\n    };\n    const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/\\sedg\\//i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Microsoft Edge'\n    };\n    const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/edg([ea]|ios)/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Microsoft Edge'\n    };\n    const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/vivaldi/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Vivaldi'\n    };\n    const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/seamonkey/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'SeaMonkey'\n    };\n    const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/sailfish/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Sailfish'\n    };\n    const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/silk/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Amazon Silk'\n    };\n    const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/phantom/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'PhantomJS'\n    };\n    const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/slimerjs/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'SlimerJS'\n    };\n    const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'BlackBerry'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/(web|hpw)[o0]s/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'WebOS Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/bada/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Bada'\n    };\n    const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/tizen/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Tizen'\n    };\n    const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/qupzilla/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'QupZilla'\n    };\n    const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/firefox|iceweasel|fxios/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Firefox'\n    };\n    const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/electron/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Electron'\n    };\n    const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/MiuiBrowser/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Miui'\n    };\n    const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/chromium/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Chromium'\n    };\n    const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/chrome|crios|crmo/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Chrome'\n    };\n    const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n}, {\n  test: [/GSA/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Google Search'\n    };\n    const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* Android Browser */\n{\n  test(parser) {\n    const notLikeAndroid = !parser.test(/like android/i);\n    const butAndroid = parser.test(/android/i);\n    return notLikeAndroid && butAndroid;\n  },\n\n  describe(ua) {\n    const browser = {\n      name: 'Android Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* PlayStation 4 */\n{\n  test: [/playstation 4/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'PlayStation 4'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* Safari */\n{\n  test: [/safari|applewebkit/i],\n\n  describe(ua) {\n    const browser = {\n      name: 'Safari'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n    if (version) {\n      browser.version = version;\n    }\n\n    return browser;\n  }\n\n},\n/* Something else */\n{\n  test: [/.*/i],\n\n  describe(ua) {\n    /* Here we try to make sure that there are explicit details about the device\n     * in order to decide what regexp exactly we want to apply\n     * (as there is a specific decision based on that conclusion)\n     */\n    const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\n    const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\n    const hasDeviceSpec = ua.search('\\\\(') !== -1;\n    const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\n    return {\n      name: Utils.getFirstMatch(regexp, ua),\n      version: Utils.getSecondMatch(regexp, ua)\n    };\n  }\n\n}];\nexport default browsersList;","map":{"version":3,"names":["Utils","commonVersionIdentifier","browsersList","test","describe","ua","browser","name","version","getFirstMatch","getSecondMatch","parser","notLikeAndroid","butAndroid","regexpWithoutDeviceSpec","regexpWithDeviceSpec","hasDeviceSpec","search","regexp"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/bowser/src/parser-browsers.js"],"sourcesContent":["/**\n * Browsers' descriptors\n *\n * The idea of descriptors is simple. You should know about them two simple things:\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\n * 2. Order of descriptors is important.\n *\n * More details:\n * 1. Method or property `test` serves as a way to detect whether the UA string\n * matches some certain browser or not. The `describe` method helps to make a result\n * object with params that show some browser-specific things: name, version, etc.\n * 2. Order of descriptors is important because a Parser goes through them one by one\n * in course. For example, if you insert Chrome's descriptor as the first one,\n * more then a half of browsers will be described as Chrome, because they will pass\n * the Chrome descriptor's test.\n *\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\n * will be applied to a UA string to test it whether it matches or not.\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\n *\n * Or `test` could be a method. In that case it gets a Parser instance and should\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\n */\n\nimport Utils from './utils.js';\n\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\n\nconst browsersList = [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe(ua) {\n      const browser = {\n        name: 'Googlebot',\n      };\n      const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Opera < 13.0 */\n  {\n    test: [/opera/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Opera > 13.0 */\n  {\n    test: [/opr\\/|opios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera',\n      };\n      const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/SamsungBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Samsung Internet for Android',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/Whale/i],\n    describe(ua) {\n      const browser = {\n        name: 'NAVER Whale Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/MZBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'MZ Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/focus/i],\n    describe(ua) {\n      const browser = {\n        name: 'Focus',\n      };\n      const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/swing/i],\n    describe(ua) {\n      const browser = {\n        name: 'Swing',\n      };\n      const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/coast/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera Coast',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera Touch',\n      };\n      const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/yabrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Yandex Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/ucbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'UC Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/Maxthon|mxios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Maxthon',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/epiphany/i],\n    describe(ua) {\n      const browser = {\n        name: 'Epiphany',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/puffin/i],\n    describe(ua) {\n      const browser = {\n        name: 'Puffin',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/sleipnir/i],\n    describe(ua) {\n      const browser = {\n        name: 'Sleipnir',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/k-meleon/i],\n    describe(ua) {\n      const browser = {\n        name: 'K-Meleon',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/micromessenger/i],\n    describe(ua) {\n      const browser = {\n        name: 'WeChat',\n      };\n      const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/qqbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: (/qqbrowserlite/i).test(ua) ? 'QQ Browser Lite' : 'QQ Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/msie|trident/i],\n    describe(ua) {\n      const browser = {\n        name: 'Internet Explorer',\n      };\n      const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/\\sedg\\//i],\n    describe(ua) {\n      const browser = {\n        name: 'Microsoft Edge',\n      };\n\n      const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/edg([ea]|ios)/i],\n    describe(ua) {\n      const browser = {\n        name: 'Microsoft Edge',\n      };\n\n      const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/vivaldi/i],\n    describe(ua) {\n      const browser = {\n        name: 'Vivaldi',\n      };\n      const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/seamonkey/i],\n    describe(ua) {\n      const browser = {\n        name: 'SeaMonkey',\n      };\n      const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/sailfish/i],\n    describe(ua) {\n      const browser = {\n        name: 'Sailfish',\n      };\n\n      const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/silk/i],\n    describe(ua) {\n      const browser = {\n        name: 'Amazon Silk',\n      };\n      const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/phantom/i],\n    describe(ua) {\n      const browser = {\n        name: 'PhantomJS',\n      };\n      const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/slimerjs/i],\n    describe(ua) {\n      const browser = {\n        name: 'SlimerJS',\n      };\n      const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n    describe(ua) {\n      const browser = {\n        name: 'BlackBerry',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const browser = {\n        name: 'WebOS Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const browser = {\n        name: 'Bada',\n      };\n      const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const browser = {\n        name: 'Tizen',\n      };\n      const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/qupzilla/i],\n    describe(ua) {\n      const browser = {\n        name: 'QupZilla',\n      };\n      const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/firefox|iceweasel|fxios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Firefox',\n      };\n      const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/electron/i],\n    describe(ua) {\n      const browser = {\n        name: 'Electron',\n      };\n      const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/MiuiBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Miui',\n      };\n      const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/chromium/i],\n    describe(ua) {\n      const browser = {\n        name: 'Chromium',\n      };\n      const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/chrome|crios|crmo/i],\n    describe(ua) {\n      const browser = {\n        name: 'Chrome',\n      };\n      const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/GSA/i],\n    describe(ua) {\n      const browser = {\n        name: 'Google Search',\n      };\n      const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Android Browser */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i);\n      const butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const browser = {\n        name: 'Android Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* PlayStation 4 */\n  {\n    test: [/playstation 4/i],\n    describe(ua) {\n      const browser = {\n        name: 'PlayStation 4',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Safari */\n  {\n    test: [/safari|applewebkit/i],\n    describe(ua) {\n      const browser = {\n        name: 'Safari',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Something else */\n  {\n    test: [/.*/i],\n    describe(ua) {\n      /* Here we try to make sure that there are explicit details about the device\n       * in order to decide what regexp exactly we want to apply\n       * (as there is a specific decision based on that conclusion)\n       */\n      const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\n      const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\n      const hasDeviceSpec = ua.search('\\\\(') !== -1;\n      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\n      return {\n        name: Utils.getFirstMatch(regexp, ua),\n        version: Utils.getSecondMatch(regexp, ua),\n      };\n    },\n  },\n];\n\nexport default browsersList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}