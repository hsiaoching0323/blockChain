{"ast":null,"code":"import Bowser from 'bowser/src/bowser';\n/** @enum {string} */\n\nconst ONBOARDING_STATE = {\n  INSTALLED: 'INSTALLED',\n  NOT_INSTALLED: 'NOT_INSTALLED',\n  REGISTERED: 'REGISTERED',\n  REGISTERING: 'REGISTERING',\n  RELOADING: 'RELOADING'\n};\n/** @enum {string} */\n\nconst EXTENSION_DOWNLOAD_URL = {\n  CHROME: 'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn',\n  FIREFOX: 'https://addons.mozilla.org/en-US/firefox/addon/ether-metamask/',\n  DEFAULT: 'https://metamask.io'\n};\n/** @enum {string} */\n\nconst FORWARDER_MODE = {\n  INJECT: 'INJECT',\n  OPEN_TAB: 'OPEN_TAB'\n}; // sessionStorage key\n\nconst REGISTRATION_IN_PROGRESS = 'REGISTRATION_IN_PROGRESS'; // forwarder iframe id\n\nconst FORWARDER_ID = 'FORWARDER_ID';\n/**\n * @typedef {Object} OnboardingOptions - Options for configuring onboarding\n * @property {string} [forwarderOrigin] - The origin of the forwarder page\n * @property {string} [forwarderMode] - The method used for opening the forwarder ('TAB' or 'INJECT')\n */\n\nclass Onboarding {\n  /**\n   *\n   * @param {OnboardingOptions} [options] - Options for configuring onboarding\n   */\n  constructor() {\n    let {\n      forwarderOrigin = 'https://fwd.metamask.io',\n      forwarderMode = FORWARDER_MODE.INJECT\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.forwarderOrigin = forwarderOrigin;\n    this.forwarderMode = forwarderMode;\n    this.state = Onboarding.isMetaMaskInstalled() ? ONBOARDING_STATE.INSTALLED : ONBOARDING_STATE.NOT_INSTALLED;\n\n    const browser = Onboarding._detectBrowser();\n\n    if (browser) {\n      this.downloadUrl = EXTENSION_DOWNLOAD_URL[browser];\n    } else {\n      this.downloadUrl = EXTENSION_DOWNLOAD_URL['DEFAULT'];\n    }\n\n    this._onMessage = this._onMessage.bind(this);\n    this._onMessageFromForwarder = this._onMessageFromForwarder.bind(this);\n    this._openForwarder = this._openForwarder.bind(this);\n    this._openDownloadPage = this._openDownloadPage.bind(this);\n    this.startOnboarding = this.startOnboarding.bind(this);\n    this.stopOnboarding = this.stopOnboarding.bind(this);\n    window.addEventListener('message', this._onMessage.bind(this), false);\n\n    if (forwarderMode === FORWARDER_MODE.INJECT && sessionStorage.getItem(REGISTRATION_IN_PROGRESS)) {\n      Onboarding._injectForwarder(this.forwarderOrigin);\n    }\n  }\n\n  async _onMessage(event) {\n    if (event.origin !== this.forwarderOrigin) {\n      return console.debug(`Ignoring non-forwarder message from '${event.origin}' with data ${JSON.stringify(event.data)}`);\n    }\n\n    if (event.data.type === 'metamask:reload') {\n      return this._onMessageFromForwarder(event);\n    } else {\n      console.debug(`Unknown message from '${event.origin}' with data ${JSON.stringify(event.data)}`);\n    }\n  }\n\n  async _onMessageFromForwarder(event) {\n    if (this.state === ONBOARDING_STATE.RELOADING) {\n      console.debug('Ignoring message while reloading');\n    } else if (this.state === ONBOARDING_STATE.NOT_INSTALLED) {\n      console.debug('Reloading now to register with MetaMask');\n      this.state = ONBOARDING_STATE.RELOADING;\n      return location.reload();\n    } else if (this.state === ONBOARDING_STATE.INSTALLED) {\n      console.debug('Registering with MetaMask');\n      this.state = ONBOARDING_STATE.REGISTERING;\n      await Onboarding._register();\n      this.state = ONBOARDING_STATE.REGISTERED;\n      event.source.postMessage({\n        type: 'metamask:registrationCompleted'\n      }, event.origin);\n      this.stopOnboarding();\n    } else if (this.state === ONBOARDING_STATE.REGISTERING) {\n      console.debug('Already registering - ignoring reload message');\n    } else if (this.state === ONBOARDING_STATE.REGISTERED) {\n      console.debug('Already registered - ignoring reload message');\n    } else {\n      throw new Error(`Unknown state: '${this.state}'`);\n    }\n  }\n  /**\n   * Starts onboarding by opening the MetaMask download page and the Onboarding forwarder\n   */\n\n\n  startOnboarding() {\n    sessionStorage.setItem(REGISTRATION_IN_PROGRESS, true);\n\n    this._openDownloadPage();\n\n    this._openForwarder();\n  }\n  /**\n   * Stops onboarding registration, including removing the injected forwarder (if any)\n   *\n   * Typically this function is not necessary, but it can be useful for cases where\n   * onboarding completes before the forwarder has registered.\n   */\n\n\n  stopOnboarding() {\n    if (sessionStorage.getItem(REGISTRATION_IN_PROGRESS)) {\n      if (this.forwarderMode === FORWARDER_MODE.INJECT) {\n        console.debug('Removing forwarder');\n\n        Onboarding._removeForwarder();\n      }\n\n      sessionStorage.setItem(REGISTRATION_IN_PROGRESS, false);\n    }\n  }\n\n  _openForwarder() {\n    if (this.forwarderMode === FORWARDER_MODE.OPEN_TAB) {\n      window.open(this.forwarderOrigin, '_blank');\n    } else {\n      Onboarding._injectForwarder(this.forwarderOrigin);\n    }\n  }\n\n  _openDownloadPage() {\n    window.open(this.downloadUrl, '_blank');\n  }\n  /**\n   * Checks whether the MetaMask extension is installed\n   *\n   * @returns {boolean} - `true` if MetaMask is installed, `false` otherwise.\n   */\n\n\n  static isMetaMaskInstalled() {\n    return Boolean(window.ethereum && window.ethereum.isMetaMask);\n  }\n\n  static async _register() {\n    if (!window.ethereum._metamask.registerOnboarding) {\n      throw new Error('Onboarding registration not supported by current version of MetaMask');\n    }\n\n    return window.ethereum._metamask.registerOnboarding();\n  }\n\n  static _injectForwarder(forwarderOrigin) {\n    const container = document.body;\n    const iframe = document.createElement('iframe');\n    iframe.setAttribute('height', 0);\n    iframe.setAttribute('width', 0);\n    iframe.setAttribute('src', forwarderOrigin);\n    iframe.setAttribute('id', FORWARDER_ID);\n    container.insertBefore(iframe, container.children[0]);\n  }\n\n  static _removeForwarder() {\n    document.getElementById(FORWARDER_ID).remove();\n  }\n\n  static _detectBrowser() {\n    const browserInfo = Bowser.parse(window.navigator.userAgent);\n\n    if (browserInfo.browser.name === 'Firefox') {\n      return 'FIREFOX';\n    } else if (['Chrome', 'Chromium'].includes(browserInfo.browser.name)) {\n      return 'CHROME';\n    }\n\n    return null;\n  }\n\n}\n\nexport default Onboarding;","map":{"version":3,"names":["Bowser","ONBOARDING_STATE","INSTALLED","NOT_INSTALLED","REGISTERED","REGISTERING","RELOADING","EXTENSION_DOWNLOAD_URL","CHROME","FIREFOX","DEFAULT","FORWARDER_MODE","INJECT","OPEN_TAB","REGISTRATION_IN_PROGRESS","FORWARDER_ID","Onboarding","constructor","forwarderOrigin","forwarderMode","state","isMetaMaskInstalled","browser","_detectBrowser","downloadUrl","_onMessage","bind","_onMessageFromForwarder","_openForwarder","_openDownloadPage","startOnboarding","stopOnboarding","window","addEventListener","sessionStorage","getItem","_injectForwarder","event","origin","console","debug","JSON","stringify","data","type","location","reload","_register","source","postMessage","Error","setItem","_removeForwarder","open","Boolean","ethereum","isMetaMask","_metamask","registerOnboarding","container","document","body","iframe","createElement","setAttribute","insertBefore","children","getElementById","remove","browserInfo","parse","navigator","userAgent","name","includes"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/metamask-onboarding/src/index.js"],"sourcesContent":["import Bowser from 'bowser/src/bowser'\n\n/** @enum {string} */\nconst ONBOARDING_STATE = {\n  INSTALLED: 'INSTALLED',\n  NOT_INSTALLED: 'NOT_INSTALLED',\n  REGISTERED: 'REGISTERED',\n  REGISTERING: 'REGISTERING',\n  RELOADING: 'RELOADING',\n}\n\n/** @enum {string} */\nconst EXTENSION_DOWNLOAD_URL = {\n  CHROME: 'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn',\n  FIREFOX: 'https://addons.mozilla.org/en-US/firefox/addon/ether-metamask/',\n  DEFAULT: 'https://metamask.io',\n}\n\n/** @enum {string} */\nconst FORWARDER_MODE = {\n  INJECT: 'INJECT',\n  OPEN_TAB: 'OPEN_TAB',\n}\n\n// sessionStorage key\nconst REGISTRATION_IN_PROGRESS = 'REGISTRATION_IN_PROGRESS'\n\n// forwarder iframe id\nconst FORWARDER_ID = 'FORWARDER_ID'\n\n\n/**\n * @typedef {Object} OnboardingOptions - Options for configuring onboarding\n * @property {string} [forwarderOrigin] - The origin of the forwarder page\n * @property {string} [forwarderMode] - The method used for opening the forwarder ('TAB' or 'INJECT')\n */\n\nclass Onboarding {\n  /**\n   *\n   * @param {OnboardingOptions} [options] - Options for configuring onboarding\n   */\n  constructor ({ forwarderOrigin = 'https://fwd.metamask.io', forwarderMode = FORWARDER_MODE.INJECT } = {}) {\n    this.forwarderOrigin = forwarderOrigin\n    this.forwarderMode = forwarderMode\n    this.state = Onboarding.isMetaMaskInstalled() ?\n      ONBOARDING_STATE.INSTALLED :\n      ONBOARDING_STATE.NOT_INSTALLED\n\n    const browser = Onboarding._detectBrowser()\n    if (browser) {\n      this.downloadUrl = EXTENSION_DOWNLOAD_URL[browser]\n    } else {\n      this.downloadUrl = EXTENSION_DOWNLOAD_URL['DEFAULT']\n    }\n\n    this._onMessage = this._onMessage.bind(this)\n    this._onMessageFromForwarder = this._onMessageFromForwarder.bind(this)\n    this._openForwarder = this._openForwarder.bind(this)\n    this._openDownloadPage = this._openDownloadPage.bind(this)\n    this.startOnboarding = this.startOnboarding.bind(this)\n    this.stopOnboarding = this.stopOnboarding.bind(this)\n\n    window.addEventListener('message', this._onMessage.bind(this), false)\n\n    if (forwarderMode === FORWARDER_MODE.INJECT && sessionStorage.getItem(REGISTRATION_IN_PROGRESS)) {\n      Onboarding._injectForwarder(this.forwarderOrigin)\n    }\n  }\n\n  async _onMessage (event) {\n    if (event.origin !== this.forwarderOrigin) {\n      return console.debug(`Ignoring non-forwarder message from '${event.origin}' with data ${JSON.stringify(event.data)}`)\n    }\n\n    if (event.data.type === 'metamask:reload') {\n      return this._onMessageFromForwarder(event)\n    } else {\n      console.debug(`Unknown message from '${event.origin}' with data ${JSON.stringify(event.data)}`)\n    }\n  }\n\n  async _onMessageFromForwarder (event) {\n    if (this.state === ONBOARDING_STATE.RELOADING) {\n      console.debug('Ignoring message while reloading')\n    } else if (this.state === ONBOARDING_STATE.NOT_INSTALLED) {\n      console.debug('Reloading now to register with MetaMask')\n      this.state = ONBOARDING_STATE.RELOADING\n      return location.reload()\n    } else if (this.state === ONBOARDING_STATE.INSTALLED) {\n      console.debug('Registering with MetaMask')\n      this.state = ONBOARDING_STATE.REGISTERING\n      await Onboarding._register()\n      this.state = ONBOARDING_STATE.REGISTERED\n      event.source.postMessage({ type: 'metamask:registrationCompleted' }, event.origin)\n      this.stopOnboarding()\n    } else if (this.state === ONBOARDING_STATE.REGISTERING) {\n      console.debug('Already registering - ignoring reload message')\n    } else if (this.state === ONBOARDING_STATE.REGISTERED) {\n      console.debug('Already registered - ignoring reload message')\n    } else {\n      throw new Error(`Unknown state: '${this.state}'`)\n    }\n  }\n\n  /**\n   * Starts onboarding by opening the MetaMask download page and the Onboarding forwarder\n   */\n  startOnboarding () {\n    sessionStorage.setItem(REGISTRATION_IN_PROGRESS, true)\n    this._openDownloadPage()\n    this._openForwarder()\n  }\n\n  /**\n   * Stops onboarding registration, including removing the injected forwarder (if any)\n   *\n   * Typically this function is not necessary, but it can be useful for cases where\n   * onboarding completes before the forwarder has registered.\n   */\n  stopOnboarding () {\n    if (sessionStorage.getItem(REGISTRATION_IN_PROGRESS)) {\n      if (this.forwarderMode === FORWARDER_MODE.INJECT) {\n        console.debug('Removing forwarder')\n        Onboarding._removeForwarder()\n      }\n      sessionStorage.setItem(REGISTRATION_IN_PROGRESS, false)\n    }\n  }\n\n  _openForwarder () {\n    if (this.forwarderMode === FORWARDER_MODE.OPEN_TAB) {\n      window.open(this.forwarderOrigin, '_blank')\n    } else {\n      Onboarding._injectForwarder(this.forwarderOrigin)\n    }\n  }\n\n  _openDownloadPage () {\n    window.open(this.downloadUrl, '_blank')\n  }\n\n  /**\n   * Checks whether the MetaMask extension is installed\n   *\n   * @returns {boolean} - `true` if MetaMask is installed, `false` otherwise.\n   */\n  static isMetaMaskInstalled () {\n    return Boolean(window.ethereum && window.ethereum.isMetaMask)\n  }\n\n  static async _register () {\n    if (!window.ethereum._metamask.registerOnboarding) {\n      throw new Error('Onboarding registration not supported by current version of MetaMask')\n    }\n\n    return window.ethereum._metamask.registerOnboarding()\n  }\n\n  static _injectForwarder (forwarderOrigin) {\n    const container = document.body\n    const iframe = document.createElement('iframe')\n    iframe.setAttribute('height', 0)\n    iframe.setAttribute('width', 0)\n    iframe.setAttribute('src', forwarderOrigin)\n    iframe.setAttribute('id', FORWARDER_ID)\n    container.insertBefore(iframe, container.children[0])\n  }\n\n  static _removeForwarder () {\n    document.getElementById(FORWARDER_ID).remove()\n  }\n\n  static _detectBrowser () {\n    const browserInfo = Bowser.parse(window.navigator.userAgent)\n    if (browserInfo.browser.name === 'Firefox') {\n      return 'FIREFOX'\n    } else if (['Chrome', 'Chromium'].includes(browserInfo.browser.name)) {\n      return 'CHROME'\n    }\n    return null\n  }\n}\n\nexport default Onboarding\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA;;AACA,MAAMC,gBAAgB,GAAG;EACvBC,SAAS,EAAE,WADY;EAEvBC,aAAa,EAAE,eAFQ;EAGvBC,UAAU,EAAE,YAHW;EAIvBC,WAAW,EAAE,aAJU;EAKvBC,SAAS,EAAE;AALY,CAAzB;AAQA;;AACA,MAAMC,sBAAsB,GAAG;EAC7BC,MAAM,EAAE,qFADqB;EAE7BC,OAAO,EAAE,gEAFoB;EAG7BC,OAAO,EAAE;AAHoB,CAA/B;AAMA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,QADa;EAErBC,QAAQ,EAAE;AAFW,CAAvB,C,CAKA;;AACA,MAAMC,wBAAwB,GAAG,0BAAjC,C,CAEA;;AACA,MAAMC,YAAY,GAAG,cAArB;AAGA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,CAAiB;EACf;AACF;AACA;AACA;EACEC,WAAW,GAA+F;IAAA,IAA7F;MAAEC,eAAe,GAAG,yBAApB;MAA+CC,aAAa,GAAGR,cAAc,CAACC;IAA9E,CAA6F,uEAAJ,EAAI;IACxG,KAAKM,eAAL,GAAuBA,eAAvB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,KAAL,GAAaJ,UAAU,CAACK,mBAAX,KACXpB,gBAAgB,CAACC,SADN,GAEXD,gBAAgB,CAACE,aAFnB;;IAIA,MAAMmB,OAAO,GAAGN,UAAU,CAACO,cAAX,EAAhB;;IACA,IAAID,OAAJ,EAAa;MACX,KAAKE,WAAL,GAAmBjB,sBAAsB,CAACe,OAAD,CAAzC;IACD,CAFD,MAEO;MACL,KAAKE,WAAL,GAAmBjB,sBAAsB,CAAC,SAAD,CAAzC;IACD;;IAED,KAAKkB,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BD,IAA7B,CAAkC,IAAlC,CAA/B;IACA,KAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBF,IAApB,CAAyB,IAAzB,CAAtB;IACA,KAAKG,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBH,IAAvB,CAA4B,IAA5B,CAAzB;IACA,KAAKI,eAAL,GAAuB,KAAKA,eAAL,CAAqBJ,IAArB,CAA0B,IAA1B,CAAvB;IACA,KAAKK,cAAL,GAAsB,KAAKA,cAAL,CAAoBL,IAApB,CAAyB,IAAzB,CAAtB;IAEAM,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKR,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAnC,EAA+D,KAA/D;;IAEA,IAAIP,aAAa,KAAKR,cAAc,CAACC,MAAjC,IAA2CsB,cAAc,CAACC,OAAf,CAAuBrB,wBAAvB,CAA/C,EAAiG;MAC/FE,UAAU,CAACoB,gBAAX,CAA4B,KAAKlB,eAAjC;IACD;EACF;;EAEe,MAAVO,UAAU,CAAEY,KAAF,EAAS;IACvB,IAAIA,KAAK,CAACC,MAAN,KAAiB,KAAKpB,eAA1B,EAA2C;MACzC,OAAOqB,OAAO,CAACC,KAAR,CAAe,wCAAuCH,KAAK,CAACC,MAAO,eAAcG,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACM,IAArB,CAA2B,EAA5G,CAAP;IACD;;IAED,IAAIN,KAAK,CAACM,IAAN,CAAWC,IAAX,KAAoB,iBAAxB,EAA2C;MACzC,OAAO,KAAKjB,uBAAL,CAA6BU,KAA7B,CAAP;IACD,CAFD,MAEO;MACLE,OAAO,CAACC,KAAR,CAAe,yBAAwBH,KAAK,CAACC,MAAO,eAAcG,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACM,IAArB,CAA2B,EAA7F;IACD;EACF;;EAE4B,MAAvBhB,uBAAuB,CAAEU,KAAF,EAAS;IACpC,IAAI,KAAKjB,KAAL,KAAenB,gBAAgB,CAACK,SAApC,EAA+C;MAC7CiC,OAAO,CAACC,KAAR,CAAc,kCAAd;IACD,CAFD,MAEO,IAAI,KAAKpB,KAAL,KAAenB,gBAAgB,CAACE,aAApC,EAAmD;MACxDoC,OAAO,CAACC,KAAR,CAAc,yCAAd;MACA,KAAKpB,KAAL,GAAanB,gBAAgB,CAACK,SAA9B;MACA,OAAOuC,QAAQ,CAACC,MAAT,EAAP;IACD,CAJM,MAIA,IAAI,KAAK1B,KAAL,KAAenB,gBAAgB,CAACC,SAApC,EAA+C;MACpDqC,OAAO,CAACC,KAAR,CAAc,2BAAd;MACA,KAAKpB,KAAL,GAAanB,gBAAgB,CAACI,WAA9B;MACA,MAAMW,UAAU,CAAC+B,SAAX,EAAN;MACA,KAAK3B,KAAL,GAAanB,gBAAgB,CAACG,UAA9B;MACAiC,KAAK,CAACW,MAAN,CAAaC,WAAb,CAAyB;QAAEL,IAAI,EAAE;MAAR,CAAzB,EAAqEP,KAAK,CAACC,MAA3E;MACA,KAAKP,cAAL;IACD,CAPM,MAOA,IAAI,KAAKX,KAAL,KAAenB,gBAAgB,CAACI,WAApC,EAAiD;MACtDkC,OAAO,CAACC,KAAR,CAAc,+CAAd;IACD,CAFM,MAEA,IAAI,KAAKpB,KAAL,KAAenB,gBAAgB,CAACG,UAApC,EAAgD;MACrDmC,OAAO,CAACC,KAAR,CAAc,8CAAd;IACD,CAFM,MAEA;MACL,MAAM,IAAIU,KAAJ,CAAW,mBAAkB,KAAK9B,KAAM,GAAxC,CAAN;IACD;EACF;EAED;AACF;AACA;;;EACEU,eAAe,GAAI;IACjBI,cAAc,CAACiB,OAAf,CAAuBrC,wBAAvB,EAAiD,IAAjD;;IACA,KAAKe,iBAAL;;IACA,KAAKD,cAAL;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEG,cAAc,GAAI;IAChB,IAAIG,cAAc,CAACC,OAAf,CAAuBrB,wBAAvB,CAAJ,EAAsD;MACpD,IAAI,KAAKK,aAAL,KAAuBR,cAAc,CAACC,MAA1C,EAAkD;QAChD2B,OAAO,CAACC,KAAR,CAAc,oBAAd;;QACAxB,UAAU,CAACoC,gBAAX;MACD;;MACDlB,cAAc,CAACiB,OAAf,CAAuBrC,wBAAvB,EAAiD,KAAjD;IACD;EACF;;EAEDc,cAAc,GAAI;IAChB,IAAI,KAAKT,aAAL,KAAuBR,cAAc,CAACE,QAA1C,EAAoD;MAClDmB,MAAM,CAACqB,IAAP,CAAY,KAAKnC,eAAjB,EAAkC,QAAlC;IACD,CAFD,MAEO;MACLF,UAAU,CAACoB,gBAAX,CAA4B,KAAKlB,eAAjC;IACD;EACF;;EAEDW,iBAAiB,GAAI;IACnBG,MAAM,CAACqB,IAAP,CAAY,KAAK7B,WAAjB,EAA8B,QAA9B;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC4B,OAAnBH,mBAAmB,GAAI;IAC5B,OAAOiC,OAAO,CAACtB,MAAM,CAACuB,QAAP,IAAmBvB,MAAM,CAACuB,QAAP,CAAgBC,UAApC,CAAd;EACD;;EAEqB,aAATT,SAAS,GAAI;IACxB,IAAI,CAACf,MAAM,CAACuB,QAAP,CAAgBE,SAAhB,CAA0BC,kBAA/B,EAAmD;MACjD,MAAM,IAAIR,KAAJ,CAAU,sEAAV,CAAN;IACD;;IAED,OAAOlB,MAAM,CAACuB,QAAP,CAAgBE,SAAhB,CAA0BC,kBAA1B,EAAP;EACD;;EAEsB,OAAhBtB,gBAAgB,CAAElB,eAAF,EAAmB;IACxC,MAAMyC,SAAS,GAAGC,QAAQ,CAACC,IAA3B;IACA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;IACAD,MAAM,CAACE,YAAP,CAAoB,QAApB,EAA8B,CAA9B;IACAF,MAAM,CAACE,YAAP,CAAoB,OAApB,EAA6B,CAA7B;IACAF,MAAM,CAACE,YAAP,CAAoB,KAApB,EAA2B9C,eAA3B;IACA4C,MAAM,CAACE,YAAP,CAAoB,IAApB,EAA0BjD,YAA1B;IACA4C,SAAS,CAACM,YAAV,CAAuBH,MAAvB,EAA+BH,SAAS,CAACO,QAAV,CAAmB,CAAnB,CAA/B;EACD;;EAEsB,OAAhBd,gBAAgB,GAAI;IACzBQ,QAAQ,CAACO,cAAT,CAAwBpD,YAAxB,EAAsCqD,MAAtC;EACD;;EAEoB,OAAd7C,cAAc,GAAI;IACvB,MAAM8C,WAAW,GAAGrE,MAAM,CAACsE,KAAP,CAAatC,MAAM,CAACuC,SAAP,CAAiBC,SAA9B,CAApB;;IACA,IAAIH,WAAW,CAAC/C,OAAZ,CAAoBmD,IAApB,KAA6B,SAAjC,EAA4C;MAC1C,OAAO,SAAP;IACD,CAFD,MAEO,IAAI,CAAC,QAAD,EAAW,UAAX,EAAuBC,QAAvB,CAAgCL,WAAW,CAAC/C,OAAZ,CAAoBmD,IAApD,CAAJ,EAA+D;MACpE,OAAO,QAAP;IACD;;IACD,OAAO,IAAP;EACD;;AAhJc;;AAmJjB,eAAezD,UAAf"},"metadata":{},"sourceType":"module"}