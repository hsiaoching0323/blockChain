{"ast":null,"code":"import Utils from './utils.js';\nimport { OS_MAP } from './constants.js';\nexport default [\n/* Roku */\n{\n  test: [/Roku\\/DVP/],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, ua);\n    return {\n      name: OS_MAP.Roku,\n      version\n    };\n  }\n\n},\n/* Windows Phone */\n{\n  test: [/windows phone/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, ua);\n    return {\n      name: OS_MAP.WindowsPhone,\n      version\n    };\n  }\n\n},\n/* Windows */\n{\n  test: [/windows /i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, ua);\n    const versionName = Utils.getWindowsVersionName(version);\n    return {\n      name: OS_MAP.Windows,\n      version,\n      versionName\n    };\n  }\n\n},\n/* Firefox on iPad */\n{\n  test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n\n  describe(ua) {\n    const result = {\n      name: OS_MAP.iOS\n    };\n    const version = Utils.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, ua);\n\n    if (version) {\n      result.version = version;\n    }\n\n    return result;\n  }\n\n},\n/* macOS */\n{\n  test: [/macintosh/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, ua).replace(/[_\\s]/g, '.');\n    const versionName = Utils.getMacOSVersionName(version);\n    const os = {\n      name: OS_MAP.MacOS,\n      version\n    };\n\n    if (versionName) {\n      os.versionName = versionName;\n    }\n\n    return os;\n  }\n\n},\n/* iOS */\n{\n  test: [/(ipod|iphone|ipad)/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, ua).replace(/[_\\s]/g, '.');\n    return {\n      name: OS_MAP.iOS,\n      version\n    };\n  }\n\n},\n/* Android */\n{\n  test(parser) {\n    const notLikeAndroid = !parser.test(/like android/i);\n    const butAndroid = parser.test(/android/i);\n    return notLikeAndroid && butAndroid;\n  },\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, ua);\n    const versionName = Utils.getAndroidVersionName(version);\n    const os = {\n      name: OS_MAP.Android,\n      version\n    };\n\n    if (versionName) {\n      os.versionName = versionName;\n    }\n\n    return os;\n  }\n\n},\n/* WebOS */\n{\n  test: [/(web|hpw)[o0]s/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, ua);\n    const os = {\n      name: OS_MAP.WebOS\n    };\n\n    if (version && version.length) {\n      os.version = version;\n    }\n\n    return os;\n  }\n\n},\n/* BlackBerry */\n{\n  test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, ua) || Utils.getFirstMatch(/\\bbb(\\d+)/i, ua);\n    return {\n      name: OS_MAP.BlackBerry,\n      version\n    };\n  }\n\n},\n/* Bada */\n{\n  test: [/bada/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, ua);\n    return {\n      name: OS_MAP.Bada,\n      version\n    };\n  }\n\n},\n/* Tizen */\n{\n  test: [/tizen/i],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, ua);\n    return {\n      name: OS_MAP.Tizen,\n      version\n    };\n  }\n\n},\n/* Linux */\n{\n  test: [/linux/i],\n\n  describe() {\n    return {\n      name: OS_MAP.Linux\n    };\n  }\n\n},\n/* Chrome OS */\n{\n  test: [/CrOS/],\n\n  describe() {\n    return {\n      name: OS_MAP.ChromeOS\n    };\n  }\n\n},\n/* Playstation 4 */\n{\n  test: [/PlayStation 4/],\n\n  describe(ua) {\n    const version = Utils.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, ua);\n    return {\n      name: OS_MAP.PlayStation4,\n      version\n    };\n  }\n\n}];","map":{"version":3,"names":["Utils","OS_MAP","test","describe","ua","version","getFirstMatch","name","Roku","WindowsPhone","versionName","getWindowsVersionName","Windows","result","iOS","getSecondMatch","replace","getMacOSVersionName","os","MacOS","parser","notLikeAndroid","butAndroid","getAndroidVersionName","Android","WebOS","length","BlackBerry","Bada","Tizen","Linux","ChromeOS","PlayStation4"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/bowser/src/parser-os.js"],"sourcesContent":["import Utils from './utils.js';\nimport { OS_MAP } from './constants.js';\n\nexport default [\n  /* Roku */\n  {\n    test: [/Roku\\/DVP/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, ua);\n      return {\n        name: OS_MAP.Roku,\n        version,\n      };\n    },\n  },\n\n  /* Windows Phone */\n  {\n    test: [/windows phone/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.WindowsPhone,\n        version,\n      };\n    },\n  },\n\n  /* Windows */\n  {\n    test: [/windows /i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, ua);\n      const versionName = Utils.getWindowsVersionName(version);\n\n      return {\n        name: OS_MAP.Windows,\n        version,\n        versionName,\n      };\n    },\n  },\n\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n    describe(ua) {\n      const result = {\n        name: OS_MAP.iOS,\n      };\n      const version = Utils.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, ua);\n      if (version) {\n        result.version = version;\n      }\n      return result;\n    },\n  },\n\n  /* macOS */\n  {\n    test: [/macintosh/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, ua).replace(/[_\\s]/g, '.');\n      const versionName = Utils.getMacOSVersionName(version);\n\n      const os = {\n        name: OS_MAP.MacOS,\n        version,\n      };\n      if (versionName) {\n        os.versionName = versionName;\n      }\n      return os;\n    },\n  },\n\n  /* iOS */\n  {\n    test: [/(ipod|iphone|ipad)/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, ua).replace(/[_\\s]/g, '.');\n\n      return {\n        name: OS_MAP.iOS,\n        version,\n      };\n    },\n  },\n\n  /* Android */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i);\n      const butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const version = Utils.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, ua);\n      const versionName = Utils.getAndroidVersionName(version);\n      const os = {\n        name: OS_MAP.Android,\n        version,\n      };\n      if (versionName) {\n        os.versionName = versionName;\n      }\n      return os;\n    },\n  },\n\n  /* WebOS */\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, ua);\n      const os = {\n        name: OS_MAP.WebOS,\n      };\n\n      if (version && version.length) {\n        os.version = version;\n      }\n      return os;\n    },\n  },\n\n  /* BlackBerry */\n  {\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, ua)\n        || Utils.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, ua)\n        || Utils.getFirstMatch(/\\bbb(\\d+)/i, ua);\n\n      return {\n        name: OS_MAP.BlackBerry,\n        version,\n      };\n    },\n  },\n\n  /* Bada */\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, ua);\n\n      return {\n        name: OS_MAP.Bada,\n        version,\n      };\n    },\n  },\n\n  /* Tizen */\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, ua);\n\n      return {\n        name: OS_MAP.Tizen,\n        version,\n      };\n    },\n  },\n\n  /* Linux */\n  {\n    test: [/linux/i],\n    describe() {\n      return {\n        name: OS_MAP.Linux,\n      };\n    },\n  },\n\n  /* Chrome OS */\n  {\n    test: [/CrOS/],\n    describe() {\n      return {\n        name: OS_MAP.ChromeOS,\n      };\n    },\n  },\n\n  /* Playstation 4 */\n  {\n    test: [/PlayStation 4/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.PlayStation4,\n        version,\n      };\n    },\n  },\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}