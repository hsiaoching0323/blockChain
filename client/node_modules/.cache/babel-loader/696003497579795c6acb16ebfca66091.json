{"ast":null,"code":"import browserParsersList from './parser-browsers.js';\nimport osParsersList from './parser-os.js';\nimport platformParsersList from './parser-platforms.js';\nimport enginesParsersList from './parser-engines.js';\nimport Utils from './utils.js';\n/**\n * The main class that arranges the whole parsing process.\n */\n\nclass Parser {\n  /**\n   * Create instance of Parser\n   *\n   * @param {String} UA User-Agent string\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\n   * improvements if you need to make a more particular parsing\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\n   *\n   * @throw {Error} in case of empty UA String\n   *\n   * @constructor\n   */\n  constructor(UA) {\n    let skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (UA === void 0 || UA === null || UA === '') {\n      throw new Error(\"UserAgent parameter can't be empty\");\n    }\n\n    this._ua = UA;\n    /**\n     * @typedef ParsedResult\n     * @property {Object} browser\n     * @property {String|undefined} [browser.name]\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\n     * @property {Object} os\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\n     * @property {Object} platform\n     * @property {String|undefined} [platform.type]\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\n     * like `\"Apple\"` or `\"Samsung\"`\n     * @property {String|undefined} [platform.model] Device model,\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\n     * @property {Object} engine\n     * @property {String|undefined} [engine.name]\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\n     * @property {String|undefined} [engine.version] String version of the engine\n     */\n\n    this.parsedResult = {};\n\n    if (skipParsing !== true) {\n      this.parse();\n    }\n  }\n  /**\n   * Get UserAgent string of current Parser instance\n   * @return {String} User-Agent String of the current <Parser> object\n   *\n   * @public\n   */\n\n\n  getUA() {\n    return this._ua;\n  }\n  /**\n   * Test a UA string for a regexp\n   * @param {RegExp} regex\n   * @return {Boolean}\n   */\n\n\n  test(regex) {\n    return regex.test(this._ua);\n  }\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   */\n\n\n  parseBrowser() {\n    this.parsedResult.browser = {};\n    const browserDescriptor = Utils.find(browserParsersList, _browser => {\n      if (typeof _browser.test === 'function') {\n        return _browser.test(this);\n      }\n\n      if (_browser.test instanceof Array) {\n        return _browser.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (browserDescriptor) {\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\n    }\n\n    return this.parsedResult.browser;\n  }\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   *\n   * @public\n   */\n\n\n  getBrowser() {\n    if (this.parsedResult.browser) {\n      return this.parsedResult.browser;\n    }\n\n    return this.parseBrowser();\n  }\n  /**\n   * Get browser's name\n   * @return {String} Browser's name or an empty string\n   *\n   * @public\n   */\n\n\n  getBrowserName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getBrowser().name).toLowerCase() || '';\n    }\n\n    return this.getBrowser().name || '';\n  }\n  /**\n   * Get browser's version\n   * @return {String} version of browser\n   *\n   * @public\n   */\n\n\n  getBrowserVersion() {\n    return this.getBrowser().version;\n  }\n  /**\n   * Get OS\n   * @return {Object}\n   *\n   * @example\n   * this.getOS();\n   * {\n   *   name: 'macOS',\n   *   version: '10.11.12'\n   * }\n   */\n\n\n  getOS() {\n    if (this.parsedResult.os) {\n      return this.parsedResult.os;\n    }\n\n    return this.parseOS();\n  }\n  /**\n   * Parse OS and save it to this.parsedResult.os\n   * @return {*|{}}\n   */\n\n\n  parseOS() {\n    this.parsedResult.os = {};\n    const os = Utils.find(osParsersList, _os => {\n      if (typeof _os.test === 'function') {\n        return _os.test(this);\n      }\n\n      if (_os.test instanceof Array) {\n        return _os.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (os) {\n      this.parsedResult.os = os.describe(this.getUA());\n    }\n\n    return this.parsedResult.os;\n  }\n  /**\n   * Get OS name\n   * @param {Boolean} [toLowerCase] return lower-cased value\n   * @return {String} name of the OS â€” macOS, Windows, Linux, etc.\n   */\n\n\n  getOSName(toLowerCase) {\n    const {\n      name\n    } = this.getOS();\n\n    if (toLowerCase) {\n      return String(name).toLowerCase() || '';\n    }\n\n    return name || '';\n  }\n  /**\n   * Get OS version\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\n   */\n\n\n  getOSVersion() {\n    return this.getOS().version;\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n\n\n  getPlatform() {\n    if (this.parsedResult.platform) {\n      return this.parsedResult.platform;\n    }\n\n    return this.parsePlatform();\n  }\n  /**\n   * Get platform name\n   * @param {Boolean} [toLowerCase=false]\n   * @return {*}\n   */\n\n\n  getPlatformType() {\n    let toLowerCase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      type\n    } = this.getPlatform();\n\n    if (toLowerCase) {\n      return String(type).toLowerCase() || '';\n    }\n\n    return type || '';\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n\n\n  parsePlatform() {\n    this.parsedResult.platform = {};\n    const platform = Utils.find(platformParsersList, _platform => {\n      if (typeof _platform.test === 'function') {\n        return _platform.test(this);\n      }\n\n      if (_platform.test instanceof Array) {\n        return _platform.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (platform) {\n      this.parsedResult.platform = platform.describe(this.getUA());\n    }\n\n    return this.parsedResult.platform;\n  }\n  /**\n   * Get parsed engine\n   * @return {{}}\n   */\n\n\n  getEngine() {\n    if (this.parsedResult.engine) {\n      return this.parsedResult.engine;\n    }\n\n    return this.parseEngine();\n  }\n  /**\n   * Get engines's name\n   * @return {String} Engines's name or an empty string\n   *\n   * @public\n   */\n\n\n  getEngineName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getEngine().name).toLowerCase() || '';\n    }\n\n    return this.getEngine().name || '';\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n\n\n  parseEngine() {\n    this.parsedResult.engine = {};\n    const engine = Utils.find(enginesParsersList, _engine => {\n      if (typeof _engine.test === 'function') {\n        return _engine.test(this);\n      }\n\n      if (_engine.test instanceof Array) {\n        return _engine.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (engine) {\n      this.parsedResult.engine = engine.describe(this.getUA());\n    }\n\n    return this.parsedResult.engine;\n  }\n  /**\n   * Parse full information about the browser\n   * @returns {Parser}\n   */\n\n\n  parse() {\n    this.parseBrowser();\n    this.parseOS();\n    this.parsePlatform();\n    this.parseEngine();\n    return this;\n  }\n  /**\n   * Get parsed result\n   * @return {ParsedResult}\n   */\n\n\n  getResult() {\n    return Utils.assign({}, this.parsedResult);\n  }\n  /**\n   * Check if parsed browser matches certain conditions\n   *\n   * @param {Object} checkTree It's one or two layered object,\n   * which can include a platform or an OS on the first layer\n   * and should have browsers specs on the bottom-laying layer\n   *\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\n   * Returns `undefined` when the browser is no described in the checkTree object.\n   *\n   * @example\n   * const browser = Bowser.getParser(window.navigator.userAgent);\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\n   * // or with os\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\n   * // or with platforms\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\n   */\n\n\n  satisfies(checkTree) {\n    const platformsAndOSes = {};\n    let platformsAndOSCounter = 0;\n    const browsers = {};\n    let browsersCounter = 0;\n    const allDefinitions = Object.keys(checkTree);\n    allDefinitions.forEach(key => {\n      const currentDefinition = checkTree[key];\n\n      if (typeof currentDefinition === 'string') {\n        browsers[key] = currentDefinition;\n        browsersCounter += 1;\n      } else if (typeof currentDefinition === 'object') {\n        platformsAndOSes[key] = currentDefinition;\n        platformsAndOSCounter += 1;\n      }\n    });\n\n    if (platformsAndOSCounter > 0) {\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => this.isOS(name));\n\n      if (OSMatchingDefinition) {\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\n\n        if (osResult !== void 0) {\n          return osResult;\n        }\n      }\n\n      const platformMatchingDefinition = Utils.find(platformsAndOSNames, name => this.isPlatform(name));\n\n      if (platformMatchingDefinition) {\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\n\n        if (platformResult !== void 0) {\n          return platformResult;\n        }\n      }\n    }\n\n    if (browsersCounter > 0) {\n      const browserNames = Object.keys(browsers);\n      const matchingDefinition = Utils.find(browserNames, name => this.isBrowser(name, true));\n\n      if (matchingDefinition !== void 0) {\n        return this.compareVersion(browsers[matchingDefinition]);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Check if the browser name equals the passed string\n   * @param browserName The string to compare with the browser name\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {boolean}\n   */\n\n\n  isBrowser(browserName) {\n    let includingAlias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\n    let browserNameLower = browserName.toLowerCase();\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\n\n    if (includingAlias && alias) {\n      browserNameLower = alias.toLowerCase();\n    }\n\n    return browserNameLower === defaultBrowserName;\n  }\n\n  compareVersion(version) {\n    let expectedResults = [0];\n    let comparableVersion = version;\n    let isLoose = false;\n    const currentBrowserVersion = this.getBrowserVersion();\n\n    if (typeof currentBrowserVersion !== 'string') {\n      return void 0;\n    }\n\n    if (version[0] === '>' || version[0] === '<') {\n      comparableVersion = version.substr(1);\n\n      if (version[1] === '=') {\n        isLoose = true;\n        comparableVersion = version.substr(2);\n      } else {\n        expectedResults = [];\n      }\n\n      if (version[0] === '>') {\n        expectedResults.push(1);\n      } else {\n        expectedResults.push(-1);\n      }\n    } else if (version[0] === '=') {\n      comparableVersion = version.substr(1);\n    } else if (version[0] === '~') {\n      isLoose = true;\n      comparableVersion = version.substr(1);\n    }\n\n    return expectedResults.indexOf(Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)) > -1;\n  }\n\n  isOS(osName) {\n    return this.getOSName(true) === String(osName).toLowerCase();\n  }\n\n  isPlatform(platformType) {\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\n  }\n\n  isEngine(engineName) {\n    return this.getEngineName(true) === String(engineName).toLowerCase();\n  }\n  /**\n   * Is anything? Check if the browser is called \"anything\",\n   * the OS called \"anything\" or the platform called \"anything\"\n   * @param {String} anything\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {Boolean}\n   */\n\n\n  is(anything) {\n    let includingAlias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);\n  }\n  /**\n   * Check if any of the given values satisfies this.is(anything)\n   * @param {String[]} anythings\n   * @returns {Boolean}\n   */\n\n\n  some() {\n    let anythings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return anythings.some(anything => this.is(anything));\n  }\n\n}\n\nexport default Parser;","map":{"version":3,"names":["browserParsersList","osParsersList","platformParsersList","enginesParsersList","Utils","Parser","constructor","UA","skipParsing","Error","_ua","parsedResult","parse","getUA","test","regex","parseBrowser","browser","browserDescriptor","find","_browser","Array","some","condition","describe","getBrowser","getBrowserName","toLowerCase","String","name","getBrowserVersion","version","getOS","os","parseOS","_os","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","type","_platform","getEngine","engine","parseEngine","getEngineName","_engine","getResult","assign","satisfies","checkTree","platformsAndOSes","platformsAndOSCounter","browsers","browsersCounter","allDefinitions","Object","keys","forEach","key","currentDefinition","platformsAndOSNames","OSMatchingDefinition","isOS","osResult","platformMatchingDefinition","isPlatform","platformResult","browserNames","matchingDefinition","isBrowser","compareVersion","undefined","browserName","includingAlias","defaultBrowserName","browserNameLower","alias","getBrowserTypeByAlias","expectedResults","comparableVersion","isLoose","currentBrowserVersion","substr","push","indexOf","compareVersions","osName","platformType","isEngine","engineName","is","anything","anythings"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/bowser/src/parser.js"],"sourcesContent":["import browserParsersList from './parser-browsers.js';\nimport osParsersList from './parser-os.js';\nimport platformParsersList from './parser-platforms.js';\nimport enginesParsersList from './parser-engines.js';\nimport Utils from './utils.js';\n\n/**\n * The main class that arranges the whole parsing process.\n */\nclass Parser {\n  /**\n   * Create instance of Parser\n   *\n   * @param {String} UA User-Agent string\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\n   * improvements if you need to make a more particular parsing\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\n   *\n   * @throw {Error} in case of empty UA String\n   *\n   * @constructor\n   */\n  constructor(UA, skipParsing = false) {\n    if (UA === void (0) || UA === null || UA === '') {\n      throw new Error(\"UserAgent parameter can't be empty\");\n    }\n\n    this._ua = UA;\n\n    /**\n     * @typedef ParsedResult\n     * @property {Object} browser\n     * @property {String|undefined} [browser.name]\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\n     * @property {Object} os\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\n     * @property {Object} platform\n     * @property {String|undefined} [platform.type]\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\n     * like `\"Apple\"` or `\"Samsung\"`\n     * @property {String|undefined} [platform.model] Device model,\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\n     * @property {Object} engine\n     * @property {String|undefined} [engine.name]\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\n     * @property {String|undefined} [engine.version] String version of the engine\n     */\n    this.parsedResult = {};\n\n    if (skipParsing !== true) {\n      this.parse();\n    }\n  }\n\n  /**\n   * Get UserAgent string of current Parser instance\n   * @return {String} User-Agent String of the current <Parser> object\n   *\n   * @public\n   */\n  getUA() {\n    return this._ua;\n  }\n\n  /**\n   * Test a UA string for a regexp\n   * @param {RegExp} regex\n   * @return {Boolean}\n   */\n  test(regex) {\n    return regex.test(this._ua);\n  }\n\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   */\n  parseBrowser() {\n    this.parsedResult.browser = {};\n\n    const browserDescriptor = Utils.find(browserParsersList, (_browser) => {\n      if (typeof _browser.test === 'function') {\n        return _browser.test(this);\n      }\n\n      if (_browser.test instanceof Array) {\n        return _browser.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (browserDescriptor) {\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\n    }\n\n    return this.parsedResult.browser;\n  }\n\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   *\n   * @public\n   */\n  getBrowser() {\n    if (this.parsedResult.browser) {\n      return this.parsedResult.browser;\n    }\n\n    return this.parseBrowser();\n  }\n\n  /**\n   * Get browser's name\n   * @return {String} Browser's name or an empty string\n   *\n   * @public\n   */\n  getBrowserName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getBrowser().name).toLowerCase() || '';\n    }\n    return this.getBrowser().name || '';\n  }\n\n\n  /**\n   * Get browser's version\n   * @return {String} version of browser\n   *\n   * @public\n   */\n  getBrowserVersion() {\n    return this.getBrowser().version;\n  }\n\n  /**\n   * Get OS\n   * @return {Object}\n   *\n   * @example\n   * this.getOS();\n   * {\n   *   name: 'macOS',\n   *   version: '10.11.12'\n   * }\n   */\n  getOS() {\n    if (this.parsedResult.os) {\n      return this.parsedResult.os;\n    }\n\n    return this.parseOS();\n  }\n\n  /**\n   * Parse OS and save it to this.parsedResult.os\n   * @return {*|{}}\n   */\n  parseOS() {\n    this.parsedResult.os = {};\n\n    const os = Utils.find(osParsersList, (_os) => {\n      if (typeof _os.test === 'function') {\n        return _os.test(this);\n      }\n\n      if (_os.test instanceof Array) {\n        return _os.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (os) {\n      this.parsedResult.os = os.describe(this.getUA());\n    }\n\n    return this.parsedResult.os;\n  }\n\n  /**\n   * Get OS name\n   * @param {Boolean} [toLowerCase] return lower-cased value\n   * @return {String} name of the OS â€” macOS, Windows, Linux, etc.\n   */\n  getOSName(toLowerCase) {\n    const { name } = this.getOS();\n\n    if (toLowerCase) {\n      return String(name).toLowerCase() || '';\n    }\n\n    return name || '';\n  }\n\n  /**\n   * Get OS version\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\n   */\n  getOSVersion() {\n    return this.getOS().version;\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  getPlatform() {\n    if (this.parsedResult.platform) {\n      return this.parsedResult.platform;\n    }\n\n    return this.parsePlatform();\n  }\n\n  /**\n   * Get platform name\n   * @param {Boolean} [toLowerCase=false]\n   * @return {*}\n   */\n  getPlatformType(toLowerCase = false) {\n    const { type } = this.getPlatform();\n\n    if (toLowerCase) {\n      return String(type).toLowerCase() || '';\n    }\n\n    return type || '';\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parsePlatform() {\n    this.parsedResult.platform = {};\n\n    const platform = Utils.find(platformParsersList, (_platform) => {\n      if (typeof _platform.test === 'function') {\n        return _platform.test(this);\n      }\n\n      if (_platform.test instanceof Array) {\n        return _platform.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (platform) {\n      this.parsedResult.platform = platform.describe(this.getUA());\n    }\n\n    return this.parsedResult.platform;\n  }\n\n  /**\n   * Get parsed engine\n   * @return {{}}\n   */\n  getEngine() {\n    if (this.parsedResult.engine) {\n      return this.parsedResult.engine;\n    }\n\n    return this.parseEngine();\n  }\n\n  /**\n   * Get engines's name\n   * @return {String} Engines's name or an empty string\n   *\n   * @public\n   */\n  getEngineName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getEngine().name).toLowerCase() || '';\n    }\n    return this.getEngine().name || '';\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parseEngine() {\n    this.parsedResult.engine = {};\n\n    const engine = Utils.find(enginesParsersList, (_engine) => {\n      if (typeof _engine.test === 'function') {\n        return _engine.test(this);\n      }\n\n      if (_engine.test instanceof Array) {\n        return _engine.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (engine) {\n      this.parsedResult.engine = engine.describe(this.getUA());\n    }\n\n    return this.parsedResult.engine;\n  }\n\n  /**\n   * Parse full information about the browser\n   * @returns {Parser}\n   */\n  parse() {\n    this.parseBrowser();\n    this.parseOS();\n    this.parsePlatform();\n    this.parseEngine();\n\n    return this;\n  }\n\n  /**\n   * Get parsed result\n   * @return {ParsedResult}\n   */\n  getResult() {\n    return Utils.assign({}, this.parsedResult);\n  }\n\n  /**\n   * Check if parsed browser matches certain conditions\n   *\n   * @param {Object} checkTree It's one or two layered object,\n   * which can include a platform or an OS on the first layer\n   * and should have browsers specs on the bottom-laying layer\n   *\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\n   * Returns `undefined` when the browser is no described in the checkTree object.\n   *\n   * @example\n   * const browser = Bowser.getParser(window.navigator.userAgent);\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\n   * // or with os\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\n   * // or with platforms\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\n   */\n  satisfies(checkTree) {\n    const platformsAndOSes = {};\n    let platformsAndOSCounter = 0;\n    const browsers = {};\n    let browsersCounter = 0;\n\n    const allDefinitions = Object.keys(checkTree);\n\n    allDefinitions.forEach((key) => {\n      const currentDefinition = checkTree[key];\n      if (typeof currentDefinition === 'string') {\n        browsers[key] = currentDefinition;\n        browsersCounter += 1;\n      } else if (typeof currentDefinition === 'object') {\n        platformsAndOSes[key] = currentDefinition;\n        platformsAndOSCounter += 1;\n      }\n    });\n\n    if (platformsAndOSCounter > 0) {\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => (this.isOS(name)));\n\n      if (OSMatchingDefinition) {\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\n\n        if (osResult !== void 0) {\n          return osResult;\n        }\n      }\n\n      const platformMatchingDefinition = Utils.find(\n        platformsAndOSNames,\n        name => (this.isPlatform(name)),\n      );\n      if (platformMatchingDefinition) {\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\n\n        if (platformResult !== void 0) {\n          return platformResult;\n        }\n      }\n    }\n\n    if (browsersCounter > 0) {\n      const browserNames = Object.keys(browsers);\n      const matchingDefinition = Utils.find(browserNames, name => (this.isBrowser(name, true)));\n\n      if (matchingDefinition !== void 0) {\n        return this.compareVersion(browsers[matchingDefinition]);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Check if the browser name equals the passed string\n   * @param browserName The string to compare with the browser name\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {boolean}\n   */\n  isBrowser(browserName, includingAlias = false) {\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\n    let browserNameLower = browserName.toLowerCase();\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\n\n    if (includingAlias && alias) {\n      browserNameLower = alias.toLowerCase();\n    }\n    return browserNameLower === defaultBrowserName;\n  }\n\n  compareVersion(version) {\n    let expectedResults = [0];\n    let comparableVersion = version;\n    let isLoose = false;\n\n    const currentBrowserVersion = this.getBrowserVersion();\n\n    if (typeof currentBrowserVersion !== 'string') {\n      return void 0;\n    }\n\n    if (version[0] === '>' || version[0] === '<') {\n      comparableVersion = version.substr(1);\n      if (version[1] === '=') {\n        isLoose = true;\n        comparableVersion = version.substr(2);\n      } else {\n        expectedResults = [];\n      }\n      if (version[0] === '>') {\n        expectedResults.push(1);\n      } else {\n        expectedResults.push(-1);\n      }\n    } else if (version[0] === '=') {\n      comparableVersion = version.substr(1);\n    } else if (version[0] === '~') {\n      isLoose = true;\n      comparableVersion = version.substr(1);\n    }\n\n    return expectedResults.indexOf(\n      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose),\n    ) > -1;\n  }\n\n  isOS(osName) {\n    return this.getOSName(true) === String(osName).toLowerCase();\n  }\n\n  isPlatform(platformType) {\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\n  }\n\n  isEngine(engineName) {\n    return this.getEngineName(true) === String(engineName).toLowerCase();\n  }\n\n  /**\n   * Is anything? Check if the browser is called \"anything\",\n   * the OS called \"anything\" or the platform called \"anything\"\n   * @param {String} anything\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {Boolean}\n   */\n  is(anything, includingAlias = false) {\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything)\n      || this.isPlatform(anything);\n  }\n\n  /**\n   * Check if any of the given values satisfies this.is(anything)\n   * @param {String[]} anythings\n   * @returns {Boolean}\n   */\n  some(anythings = []) {\n    return anythings.some(anything => this.is(anything));\n  }\n}\n\nexport default Parser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}