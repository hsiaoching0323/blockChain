{"ast":null,"code":"/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */\nimport Parser from './parser.js';\nimport { BROWSER_MAP, ENGINE_MAP, OS_MAP, PLATFORMS_MAP } from './constants.js';\n/**\n * Bowser class.\n * Keep it simple as much as it can be.\n * It's supposed to work with collections of {@link Parser} instances\n * rather then solve one-instance problems.\n * All the one-instance stuff is located in Parser class.\n *\n * @class\n * @classdesc Bowser is a static object, that provides an API to the Parsers\n * @hideconstructor\n */\n\nclass Bowser {\n  /**\n   * Creates a {@link Parser} instance\n   *\n   * @param {String} UA UserAgent string\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\n   * explicitly. Same as `skipParsing` for {@link Parser}.\n   * @returns {Parser}\n   * @throws {Error} when UA is not a String\n   *\n   * @example\n   * const parser = Bowser.getParser(window.navigator.userAgent);\n   * const result = parser.getResult();\n   */\n  static getParser(UA) {\n    let skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (typeof UA !== 'string') {\n      throw new Error('UserAgent should be a string');\n    }\n\n    return new Parser(UA, skipParsing);\n  }\n  /**\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\n   *\n   * @param UA\n   * @return {ParsedResult}\n   *\n   * @example\n   * const result = Bowser.parse(window.navigator.userAgent);\n   */\n\n\n  static parse(UA) {\n    return new Parser(UA).getResult();\n  }\n\n  static get BROWSER_MAP() {\n    return BROWSER_MAP;\n  }\n\n  static get ENGINE_MAP() {\n    return ENGINE_MAP;\n  }\n\n  static get OS_MAP() {\n    return OS_MAP;\n  }\n\n  static get PLATFORMS_MAP() {\n    return PLATFORMS_MAP;\n  }\n\n}\n\nexport default Bowser;","map":{"version":3,"names":["Parser","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bowser","getParser","UA","skipParsing","Error","parse","getResult"],"sources":["/Users/judywang/Desktop/truffle/client/node_modules/bowser/src/bowser.js"],"sourcesContent":["/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */\nimport Parser from './parser.js';\nimport {\n  BROWSER_MAP,\n  ENGINE_MAP,\n  OS_MAP,\n  PLATFORMS_MAP,\n} from './constants.js';\n\n/**\n * Bowser class.\n * Keep it simple as much as it can be.\n * It's supposed to work with collections of {@link Parser} instances\n * rather then solve one-instance problems.\n * All the one-instance stuff is located in Parser class.\n *\n * @class\n * @classdesc Bowser is a static object, that provides an API to the Parsers\n * @hideconstructor\n */\nclass Bowser {\n  /**\n   * Creates a {@link Parser} instance\n   *\n   * @param {String} UA UserAgent string\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\n   * explicitly. Same as `skipParsing` for {@link Parser}.\n   * @returns {Parser}\n   * @throws {Error} when UA is not a String\n   *\n   * @example\n   * const parser = Bowser.getParser(window.navigator.userAgent);\n   * const result = parser.getResult();\n   */\n  static getParser(UA, skipParsing = false) {\n    if (typeof UA !== 'string') {\n      throw new Error('UserAgent should be a string');\n    }\n    return new Parser(UA, skipParsing);\n  }\n\n  /**\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\n   *\n   * @param UA\n   * @return {ParsedResult}\n   *\n   * @example\n   * const result = Bowser.parse(window.navigator.userAgent);\n   */\n  static parse(UA) {\n    return (new Parser(UA)).getResult();\n  }\n\n  static get BROWSER_MAP() {\n    return BROWSER_MAP;\n  }\n\n  static get ENGINE_MAP() {\n    return ENGINE_MAP;\n  }\n\n  static get OS_MAP() {\n    return OS_MAP;\n  }\n\n  static get PLATFORMS_MAP() {\n    return PLATFORMS_MAP;\n  }\n}\n\nexport default Bowser;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,gBALP;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACkB,OAATC,SAAS,CAACC,EAAD,EAA0B;IAAA,IAArBC,WAAqB,uEAAP,KAAO;;IACxC,IAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;MAC1B,MAAM,IAAIE,KAAJ,CAAU,8BAAV,CAAN;IACD;;IACD,OAAO,IAAIT,MAAJ,CAAWO,EAAX,EAAeC,WAAf,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,OAALE,KAAK,CAACH,EAAD,EAAK;IACf,OAAQ,IAAIP,MAAJ,CAAWO,EAAX,CAAD,CAAiBI,SAAjB,EAAP;EACD;;EAEqB,WAAXV,WAAW,GAAG;IACvB,OAAOA,WAAP;EACD;;EAEoB,WAAVC,UAAU,GAAG;IACtB,OAAOA,UAAP;EACD;;EAEgB,WAANC,MAAM,GAAG;IAClB,OAAOA,MAAP;EACD;;EAEuB,WAAbC,aAAa,GAAG;IACzB,OAAOA,aAAP;EACD;;AAhDU;;AAmDb,eAAeC,MAAf"},"metadata":{},"sourceType":"module"}