{"ast":null,"code":"import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\nexport default class Utils {\n  /**\n   * Get first matched item for a string\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getFirstMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 0 && match[1] || '';\n  }\n  /**\n   * Get second matched item for a string\n   * @param regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n\n\n  static getSecondMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 1 && match[2] || '';\n  }\n  /**\n   * Match a regexp and return a constant or undefined\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @param {*} _const Any const that will be returned if regexp matches the string\n   * @return {*}\n   */\n\n\n  static matchAndReturnConst(regexp, ua, _const) {\n    if (regexp.test(ua)) {\n      return _const;\n    }\n\n    return void 0;\n  }\n\n  static getWindowsVersionName(version) {\n    switch (version) {\n      case 'NT':\n        return 'NT';\n\n      case 'XP':\n        return 'XP';\n\n      case 'NT 5.0':\n        return '2000';\n\n      case 'NT 5.1':\n        return 'XP';\n\n      case 'NT 5.2':\n        return '2003';\n\n      case 'NT 6.0':\n        return 'Vista';\n\n      case 'NT 6.1':\n        return '7';\n\n      case 'NT 6.2':\n        return '8';\n\n      case 'NT 6.3':\n        return '8.1';\n\n      case 'NT 10.0':\n        return '10';\n\n      default:\n        return undefined;\n    }\n  }\n  /**\n   * Get macOS version name\n   *    10.5 - Leopard\n   *    10.6 - Snow Leopard\n   *    10.7 - Lion\n   *    10.8 - Mountain Lion\n   *    10.9 - Mavericks\n   *    10.10 - Yosemite\n   *    10.11 - El Capitan\n   *    10.12 - Sierra\n   *    10.13 - High Sierra\n   *    10.14 - Mojave\n   *    10.15 - Catalina\n   *\n   * @example\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n\n\n  static getMacOSVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] !== 10) return undefined;\n\n    switch (v[1]) {\n      case 5:\n        return 'Leopard';\n\n      case 6:\n        return 'Snow Leopard';\n\n      case 7:\n        return 'Lion';\n\n      case 8:\n        return 'Mountain Lion';\n\n      case 9:\n        return 'Mavericks';\n\n      case 10:\n        return 'Yosemite';\n\n      case 11:\n        return 'El Capitan';\n\n      case 12:\n        return 'Sierra';\n\n      case 13:\n        return 'High Sierra';\n\n      case 14:\n        return 'Mojave';\n\n      case 15:\n        return 'Catalina';\n\n      default:\n        return undefined;\n    }\n  }\n  /**\n   * Get Android version name\n   *    1.5 - Cupcake\n   *    1.6 - Donut\n   *    2.0 - Eclair\n   *    2.1 - Eclair\n   *    2.2 - Froyo\n   *    2.x - Gingerbread\n   *    3.x - Honeycomb\n   *    4.0 - Ice Cream Sandwich\n   *    4.1 - Jelly Bean\n   *    4.4 - KitKat\n   *    5.x - Lollipop\n   *    6.x - Marshmallow\n   *    7.x - Nougat\n   *    8.x - Oreo\n   *    9.x - Pie\n   *\n   * @example\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n\n\n  static getAndroidVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] === 1 && v[1] < 5) return undefined;\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\n    if (v[0] === 3) return 'Honeycomb';\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\n    if (v[0] === 5) return 'Lollipop';\n    if (v[0] === 6) return 'Marshmallow';\n    if (v[0] === 7) return 'Nougat';\n    if (v[0] === 8) return 'Oreo';\n    if (v[0] === 9) return 'Pie';\n    return undefined;\n  }\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n\n\n  static getVersionPrecision(version) {\n    return version.split('.').length;\n  }\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\n   *\n   * @param {String} versionA versions versions to compare\n   * @param {String} versionB versions versions to compare\n   * @param {boolean} [isLoose] enable loose comparison\n   * @return {Number} comparison result: -1 when versionA is lower,\n   * 1 when versionA is bigger, 0 when both equal\n   */\n\n  /* eslint consistent-return: 1 */\n\n\n  static compareVersions(versionA, versionB) {\n    let isLoose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\n    let precision = Math.max(versionAPrecision, versionBPrecision);\n    let lastPrecision = 0;\n    const chunks = Utils.map([versionA, versionB], version => {\n      const delta = precision - Utils.getVersionPrecision(version); // 2) \"9\" -> \"9.0\" (for precision = 2)\n\n      const _version = version + new Array(delta + 1).join('.0'); // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n\n\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\n    }); // adjust precision for loose comparison\n\n    if (isLoose) {\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\n    } // iterate in reverse order by reversed chunks array\n\n\n    precision -= 1;\n\n    while (precision >= lastPrecision) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n\n      if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === lastPrecision) {\n          // all version chunks are same\n          return 0;\n        }\n\n        precision -= 1;\n      } else if (chunks[0][precision] < chunks[1][precision]) {\n        return -1;\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n\n\n  static map(arr, iterator) {\n    const result = [];\n    let i;\n\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n\n    for (i = 0; i < arr.length; i += 1) {\n      result.push(iterator(arr[i]));\n    }\n\n    return result;\n  }\n  /**\n   * Array::find polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} predicate\n   * @return {Array}\n   */\n\n\n  static find(arr, predicate) {\n    let i;\n    let l;\n\n    if (Array.prototype.find) {\n      return Array.prototype.find.call(arr, predicate);\n    }\n\n    for (i = 0, l = arr.length; i < l; i += 1) {\n      const value = arr[i];\n\n      if (predicate(value, i)) {\n        return value;\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Object::assign polyfill\n   *\n   * @param  {Object} obj\n   * @param  {Object} ...objs\n   * @return {Object}\n   */\n\n\n  static assign(obj) {\n    const result = obj;\n    let i;\n    let l;\n\n    for (var _len = arguments.length, assigners = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      assigners[_key - 1] = arguments[_key];\n    }\n\n    if (Object.assign) {\n      return Object.assign(obj, ...assigners);\n    }\n\n    for (i = 0, l = assigners.length; i < l; i += 1) {\n      const assigner = assigners[i];\n\n      if (typeof assigner === 'object' && assigner !== null) {\n        const keys = Object.keys(assigner);\n        keys.forEach(key => {\n          result[key] = assigner[key];\n        });\n      }\n    }\n\n    return obj;\n  }\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('Microsoft Edge') // edge\n   *\n   * @param  {string} browserName\n   * @return {string}\n   */\n\n\n  static getBrowserAlias(browserName) {\n    return BROWSER_ALIASES_MAP[browserName];\n  }\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('edge') // Microsoft Edge\n   *\n   * @param  {string} browserAlias\n   * @return {string}\n   */\n\n\n  static getBrowserTypeByAlias(browserAlias) {\n    return BROWSER_MAP[browserAlias] || '';\n  }\n\n}","map":{"version":3,"names":["BROWSER_MAP","BROWSER_ALIASES_MAP","Utils","getFirstMatch","regexp","ua","match","length","getSecondMatch","matchAndReturnConst","_const","test","getWindowsVersionName","version","undefined","getMacOSVersionName","v","split","splice","map","s","parseInt","push","getAndroidVersionName","getVersionPrecision","compareVersions","versionA","versionB","isLoose","versionAPrecision","versionBPrecision","precision","Math","max","lastPrecision","chunks","delta","_version","Array","join","chunk","reverse","min","arr","iterator","result","i","prototype","call","find","predicate","l","value","assign","obj","assigners","Object","assigner","keys","forEach","key","getBrowserAlias","browserName","getBrowserTypeByAlias","browserAlias"],"sources":["/Users/judywang/Desktop/Truffle/client/node_modules/bowser/src/utils.js"],"sourcesContent":["import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\n\nexport default class Utils {\n  /**\n   * Get first matched item for a string\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getFirstMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return (match && match.length > 0 && match[1]) || '';\n  }\n\n  /**\n   * Get second matched item for a string\n   * @param regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getSecondMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return (match && match.length > 1 && match[2]) || '';\n  }\n\n  /**\n   * Match a regexp and return a constant or undefined\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @param {*} _const Any const that will be returned if regexp matches the string\n   * @return {*}\n   */\n  static matchAndReturnConst(regexp, ua, _const) {\n    if (regexp.test(ua)) {\n      return _const;\n    }\n    return void (0);\n  }\n\n  static getWindowsVersionName(version) {\n    switch (version) {\n      case 'NT': return 'NT';\n      case 'XP': return 'XP';\n      case 'NT 5.0': return '2000';\n      case 'NT 5.1': return 'XP';\n      case 'NT 5.2': return '2003';\n      case 'NT 6.0': return 'Vista';\n      case 'NT 6.1': return '7';\n      case 'NT 6.2': return '8';\n      case 'NT 6.3': return '8.1';\n      case 'NT 10.0': return '10';\n      default: return undefined;\n    }\n  }\n\n  /**\n   * Get macOS version name\n   *    10.5 - Leopard\n   *    10.6 - Snow Leopard\n   *    10.7 - Lion\n   *    10.8 - Mountain Lion\n   *    10.9 - Mavericks\n   *    10.10 - Yosemite\n   *    10.11 - El Capitan\n   *    10.12 - Sierra\n   *    10.13 - High Sierra\n   *    10.14 - Mojave\n   *    10.15 - Catalina\n   *\n   * @example\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getMacOSVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] !== 10) return undefined;\n    switch (v[1]) {\n      case 5: return 'Leopard';\n      case 6: return 'Snow Leopard';\n      case 7: return 'Lion';\n      case 8: return 'Mountain Lion';\n      case 9: return 'Mavericks';\n      case 10: return 'Yosemite';\n      case 11: return 'El Capitan';\n      case 12: return 'Sierra';\n      case 13: return 'High Sierra';\n      case 14: return 'Mojave';\n      case 15: return 'Catalina';\n      default: return undefined;\n    }\n  }\n\n  /**\n   * Get Android version name\n   *    1.5 - Cupcake\n   *    1.6 - Donut\n   *    2.0 - Eclair\n   *    2.1 - Eclair\n   *    2.2 - Froyo\n   *    2.x - Gingerbread\n   *    3.x - Honeycomb\n   *    4.0 - Ice Cream Sandwich\n   *    4.1 - Jelly Bean\n   *    4.4 - KitKat\n   *    5.x - Lollipop\n   *    6.x - Marshmallow\n   *    7.x - Nougat\n   *    8.x - Oreo\n   *    9.x - Pie\n   *\n   * @example\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getAndroidVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] === 1 && v[1] < 5) return undefined;\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\n    if (v[0] === 3) return 'Honeycomb';\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\n    if (v[0] === 5) return 'Lollipop';\n    if (v[0] === 6) return 'Marshmallow';\n    if (v[0] === 7) return 'Nougat';\n    if (v[0] === 8) return 'Oreo';\n    if (v[0] === 9) return 'Pie';\n    return undefined;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  static getVersionPrecision(version) {\n    return version.split('.').length;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\n   *\n   * @param {String} versionA versions versions to compare\n   * @param {String} versionB versions versions to compare\n   * @param {boolean} [isLoose] enable loose comparison\n   * @return {Number} comparison result: -1 when versionA is lower,\n   * 1 when versionA is bigger, 0 when both equal\n   */\n  /* eslint consistent-return: 1 */\n  static compareVersions(versionA, versionB, isLoose = false) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\n\n    let precision = Math.max(versionAPrecision, versionBPrecision);\n    let lastPrecision = 0;\n\n    const chunks = Utils.map([versionA, versionB], (version) => {\n      const delta = precision - Utils.getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      const _version = version + new Array(delta + 1).join('.0');\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\n    });\n\n    // adjust precision for loose comparison\n    if (isLoose) {\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\n    }\n\n    // iterate in reverse order by reversed chunks array\n    precision -= 1;\n    while (precision >= lastPrecision) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n\n      if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === lastPrecision) {\n          // all version chunks are same\n          return 0;\n        }\n\n        precision -= 1;\n      } else if (chunks[0][precision] < chunks[1][precision]) {\n        return -1;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  static map(arr, iterator) {\n    const result = [];\n    let i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i += 1) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Array::find polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} predicate\n   * @return {Array}\n   */\n  static find(arr, predicate) {\n    let i;\n    let l;\n    if (Array.prototype.find) {\n      return Array.prototype.find.call(arr, predicate);\n    }\n    for (i = 0, l = arr.length; i < l; i += 1) {\n      const value = arr[i];\n      if (predicate(value, i)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Object::assign polyfill\n   *\n   * @param  {Object} obj\n   * @param  {Object} ...objs\n   * @return {Object}\n   */\n  static assign(obj, ...assigners) {\n    const result = obj;\n    let i;\n    let l;\n    if (Object.assign) {\n      return Object.assign(obj, ...assigners);\n    }\n    for (i = 0, l = assigners.length; i < l; i += 1) {\n      const assigner = assigners[i];\n      if (typeof assigner === 'object' && assigner !== null) {\n        const keys = Object.keys(assigner);\n        keys.forEach((key) => {\n          result[key] = assigner[key];\n        });\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('Microsoft Edge') // edge\n   *\n   * @param  {string} browserName\n   * @return {string}\n   */\n  static getBrowserAlias(browserName) {\n    return BROWSER_ALIASES_MAP[browserName];\n  }\n\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('edge') // Microsoft Edge\n   *\n   * @param  {string} browserAlias\n   * @return {string}\n   */\n  static getBrowserTypeByAlias(browserAlias) {\n    return BROWSER_MAP[browserAlias] || '';\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,QAAiD,gBAAjD;AAEA,eAAe,MAAMC,KAAN,CAAY;EACzB;AACF;AACA;AACA;AACA;AACA;EACsB,OAAbC,aAAa,CAACC,MAAD,EAASC,EAAT,EAAa;IAC/B,MAAMC,KAAK,GAAGD,EAAE,CAACC,KAAH,CAASF,MAAT,CAAd;IACA,OAAQE,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAxB,IAA6BD,KAAK,CAAC,CAAD,CAAnC,IAA2C,EAAlD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACuB,OAAdE,cAAc,CAACJ,MAAD,EAASC,EAAT,EAAa;IAChC,MAAMC,KAAK,GAAGD,EAAE,CAACC,KAAH,CAASF,MAAT,CAAd;IACA,OAAQE,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAxB,IAA6BD,KAAK,CAAC,CAAD,CAAnC,IAA2C,EAAlD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAC4B,OAAnBG,mBAAmB,CAACL,MAAD,EAASC,EAAT,EAAaK,MAAb,EAAqB;IAC7C,IAAIN,MAAM,CAACO,IAAP,CAAYN,EAAZ,CAAJ,EAAqB;MACnB,OAAOK,MAAP;IACD;;IACD,OAAO,KAAM,CAAb;EACD;;EAE2B,OAArBE,qBAAqB,CAACC,OAAD,EAAU;IACpC,QAAQA,OAAR;MACE,KAAK,IAAL;QAAW,OAAO,IAAP;;MACX,KAAK,IAAL;QAAW,OAAO,IAAP;;MACX,KAAK,QAAL;QAAe,OAAO,MAAP;;MACf,KAAK,QAAL;QAAe,OAAO,IAAP;;MACf,KAAK,QAAL;QAAe,OAAO,MAAP;;MACf,KAAK,QAAL;QAAe,OAAO,OAAP;;MACf,KAAK,QAAL;QAAe,OAAO,GAAP;;MACf,KAAK,QAAL;QAAe,OAAO,GAAP;;MACf,KAAK,QAAL;QAAe,OAAO,KAAP;;MACf,KAAK,SAAL;QAAgB,OAAO,IAAP;;MAChB;QAAS,OAAOC,SAAP;IAXX;EAaD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC4B,OAAnBC,mBAAmB,CAACF,OAAD,EAAU;IAClC,MAAMG,CAAC,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmBC,MAAnB,CAA0B,CAA1B,EAA6B,CAA7B,EAAgCC,GAAhC,CAAoCC,CAAC,IAAIC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAR,IAAmB,CAA5D,CAAV;IACAJ,CAAC,CAACM,IAAF,CAAO,CAAP;IACA,IAAIN,CAAC,CAAC,CAAD,CAAD,KAAS,EAAb,EAAiB,OAAOF,SAAP;;IACjB,QAAQE,CAAC,CAAC,CAAD,CAAT;MACE,KAAK,CAAL;QAAQ,OAAO,SAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,cAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,MAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,eAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,WAAP;;MACR,KAAK,EAAL;QAAS,OAAO,UAAP;;MACT,KAAK,EAAL;QAAS,OAAO,YAAP;;MACT,KAAK,EAAL;QAAS,OAAO,QAAP;;MACT,KAAK,EAAL;QAAS,OAAO,aAAP;;MACT,KAAK,EAAL;QAAS,OAAO,QAAP;;MACT,KAAK,EAAL;QAAS,OAAO,UAAP;;MACT;QAAS,OAAOF,SAAP;IAZX;EAcD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC8B,OAArBS,qBAAqB,CAACV,OAAD,EAAU;IACpC,MAAMG,CAAC,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmBC,MAAnB,CAA0B,CAA1B,EAA6B,CAA7B,EAAgCC,GAAhC,CAAoCC,CAAC,IAAIC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAR,IAAmB,CAA5D,CAAV;IACAJ,CAAC,CAACM,IAAF,CAAO,CAAP;IACA,IAAIN,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAOF,SAAP;IAC5B,IAAIE,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAO,SAAP;IAC5B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,IAAQ,CAA1B,EAA6B,OAAO,OAAP;IAC7B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAO,QAAP;IAC5B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,KAAS,CAA3B,EAA8B,OAAO,OAAP;IAC9B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAO,aAAP;IAC5B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,WAAP;IAChB,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAO,oBAAP;IAC5B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAzB,EAA4B,OAAO,YAAP;IAC5B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAT,IAAcA,CAAC,CAAC,CAAD,CAAD,IAAQ,CAA1B,EAA6B,OAAO,QAAP;IAC7B,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,UAAP;IAChB,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,aAAP;IAChB,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,QAAP;IAChB,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,MAAP;IAChB,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,KAAP;IAChB,OAAOF,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC4B,OAAnBU,mBAAmB,CAACX,OAAD,EAAU;IAClC,OAAOA,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmBV,MAA1B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACsB,OAAfkB,eAAe,CAACC,QAAD,EAAWC,QAAX,EAAsC;IAAA,IAAjBC,OAAiB,uEAAP,KAAO;IAC1D;IACA,MAAMC,iBAAiB,GAAG3B,KAAK,CAACsB,mBAAN,CAA0BE,QAA1B,CAA1B;IACA,MAAMI,iBAAiB,GAAG5B,KAAK,CAACsB,mBAAN,CAA0BG,QAA1B,CAA1B;IAEA,IAAII,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,iBAAT,EAA4BC,iBAA5B,CAAhB;IACA,IAAII,aAAa,GAAG,CAApB;IAEA,MAAMC,MAAM,GAAGjC,KAAK,CAACiB,GAAN,CAAU,CAACO,QAAD,EAAWC,QAAX,CAAV,EAAiCd,OAAD,IAAa;MAC1D,MAAMuB,KAAK,GAAGL,SAAS,GAAG7B,KAAK,CAACsB,mBAAN,CAA0BX,OAA1B,CAA1B,CAD0D,CAG1D;;MACA,MAAMwB,QAAQ,GAAGxB,OAAO,GAAG,IAAIyB,KAAJ,CAAUF,KAAK,GAAG,CAAlB,EAAqBG,IAArB,CAA0B,IAA1B,CAA3B,CAJ0D,CAM1D;;;MACA,OAAOrC,KAAK,CAACiB,GAAN,CAAUkB,QAAQ,CAACpB,KAAT,CAAe,GAAf,CAAV,EAA+BuB,KAAK,IAAI,IAAIF,KAAJ,CAAU,KAAKE,KAAK,CAACjC,MAArB,EAA6BgC,IAA7B,CAAkC,GAAlC,IAAyCC,KAAjF,EAAwFC,OAAxF,EAAP;IACD,CARc,CAAf,CAR0D,CAkB1D;;IACA,IAAIb,OAAJ,EAAa;MACXM,aAAa,GAAGH,SAAS,GAAGC,IAAI,CAACU,GAAL,CAASb,iBAAT,EAA4BC,iBAA5B,CAA5B;IACD,CArByD,CAuB1D;;;IACAC,SAAS,IAAI,CAAb;;IACA,OAAOA,SAAS,IAAIG,aAApB,EAAmC;MACjC;MACA,IAAIC,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,IAAuBI,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,CAA3B,EAAiD;QAC/C,OAAO,CAAP;MACD;;MAED,IAAII,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,MAAyBI,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,CAA7B,EAAmD;QACjD,IAAIA,SAAS,KAAKG,aAAlB,EAAiC;UAC/B;UACA,OAAO,CAAP;QACD;;QAEDH,SAAS,IAAI,CAAb;MACD,CAPD,MAOO,IAAII,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,IAAuBI,MAAM,CAAC,CAAD,CAAN,CAAUJ,SAAV,CAA3B,EAAiD;QACtD,OAAO,CAAC,CAAR;MACD;IACF;;IAED,OAAOjB,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACY,OAAHK,GAAG,CAACwB,GAAD,EAAMC,QAAN,EAAgB;IACxB,MAAMC,MAAM,GAAG,EAAf;IACA,IAAIC,CAAJ;;IACA,IAAIR,KAAK,CAACS,SAAN,CAAgB5B,GAApB,EAAyB;MACvB,OAAOmB,KAAK,CAACS,SAAN,CAAgB5B,GAAhB,CAAoB6B,IAApB,CAAyBL,GAAzB,EAA8BC,QAA9B,CAAP;IACD;;IACD,KAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,GAAG,CAACpC,MAApB,EAA4BuC,CAAC,IAAI,CAAjC,EAAoC;MAClCD,MAAM,CAACvB,IAAP,CAAYsB,QAAQ,CAACD,GAAG,CAACG,CAAD,CAAJ,CAApB;IACD;;IACD,OAAOD,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACa,OAAJI,IAAI,CAACN,GAAD,EAAMO,SAAN,EAAiB;IAC1B,IAAIJ,CAAJ;IACA,IAAIK,CAAJ;;IACA,IAAIb,KAAK,CAACS,SAAN,CAAgBE,IAApB,EAA0B;MACxB,OAAOX,KAAK,CAACS,SAAN,CAAgBE,IAAhB,CAAqBD,IAArB,CAA0BL,GAA1B,EAA+BO,SAA/B,CAAP;IACD;;IACD,KAAKJ,CAAC,GAAG,CAAJ,EAAOK,CAAC,GAAGR,GAAG,CAACpC,MAApB,EAA4BuC,CAAC,GAAGK,CAAhC,EAAmCL,CAAC,IAAI,CAAxC,EAA2C;MACzC,MAAMM,KAAK,GAAGT,GAAG,CAACG,CAAD,CAAjB;;MACA,IAAII,SAAS,CAACE,KAAD,EAAQN,CAAR,CAAb,EAAyB;QACvB,OAAOM,KAAP;MACD;IACF;;IACD,OAAOtC,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACe,OAANuC,MAAM,CAACC,GAAD,EAAoB;IAC/B,MAAMT,MAAM,GAAGS,GAAf;IACA,IAAIR,CAAJ;IACA,IAAIK,CAAJ;;IAH+B,kCAAXI,SAAW;MAAXA,SAAW;IAAA;;IAI/B,IAAIC,MAAM,CAACH,MAAX,EAAmB;MACjB,OAAOG,MAAM,CAACH,MAAP,CAAcC,GAAd,EAAmB,GAAGC,SAAtB,CAAP;IACD;;IACD,KAAKT,CAAC,GAAG,CAAJ,EAAOK,CAAC,GAAGI,SAAS,CAAChD,MAA1B,EAAkCuC,CAAC,GAAGK,CAAtC,EAAyCL,CAAC,IAAI,CAA9C,EAAiD;MAC/C,MAAMW,QAAQ,GAAGF,SAAS,CAACT,CAAD,CAA1B;;MACA,IAAI,OAAOW,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;QACrD,MAAMC,IAAI,GAAGF,MAAM,CAACE,IAAP,CAAYD,QAAZ,CAAb;QACAC,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAS;UACpBf,MAAM,CAACe,GAAD,CAAN,GAAcH,QAAQ,CAACG,GAAD,CAAtB;QACD,CAFD;MAGD;IACF;;IACD,OAAON,GAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwB,OAAfO,eAAe,CAACC,WAAD,EAAc;IAClC,OAAO7D,mBAAmB,CAAC6D,WAAD,CAA1B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC8B,OAArBC,qBAAqB,CAACC,YAAD,EAAe;IACzC,OAAOhE,WAAW,CAACgE,YAAD,CAAX,IAA6B,EAApC;EACD;;AAjTwB"},"metadata":{},"sourceType":"module"}